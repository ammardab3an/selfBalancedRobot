
selfBalancedRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00002732  000027c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000081  00800066  00800066  000027cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c75  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  000045e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebd  00000000  00000000  00004f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00005dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065b  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000862  00000000  00000000  0000671f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006f81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
       c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      10:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      14:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      18:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      1c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      20:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      24:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_9>
      28:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      2c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      30:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      34:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      3c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      40:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      44:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      48:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      4c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      50:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 00       	.word	0x003f	; ????

00000082 <__trampolines_end>:
      82:	00 40       	sbci	r16, 0x00	; 0
      84:	7a 10       	cpse	r7, r10
      86:	f3 5a       	subi	r31, 0xA3	; 163
      88:	00 a0       	ldd	r0, Z+32	; 0x20
      8a:	72 4e       	sbci	r23, 0xE2	; 226
      8c:	18 09       	sbc	r17, r8
      8e:	00 10       	cpse	r0, r0
      90:	a5 d4       	rcall	.+2378   	; 0x9dc <calculate_IMU_error+0x80>
      92:	e8 00       	.word	0x00e8	; ????
      94:	00 e8       	ldi	r16, 0x80	; 128
      96:	76 48       	sbci	r23, 0x86	; 134
      98:	17 00       	.word	0x0017	; ????
      9a:	00 e4       	ldi	r16, 0x40	; 64
      9c:	0b 54       	subi	r16, 0x4B	; 75
      9e:	02 00       	.word	0x0002	; ????
      a0:	00 ca       	rjmp	.-3072   	; 0xfffff4a2 <__eeprom_end+0xff7ef4a2>
      a2:	9a 3b       	cpi	r25, 0xBA	; 186
      a4:	00 00       	nop
      a6:	00 e1       	ldi	r16, 0x10	; 16
      a8:	f5 05       	cpc	r31, r5
      aa:	00 00       	nop
      ac:	80 96       	adiw	r24, 0x20	; 32
      ae:	98 00       	.word	0x0098	; ????
      b0:	00 00       	nop
      b2:	40 42       	sbci	r20, 0x20	; 32
      b4:	0f 00       	.word	0x000f	; ????
      b6:	00 00       	nop
      b8:	a0 86       	std	Z+8, r10	; 0x08
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 00       	nop
      be:	10 27       	eor	r17, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	e8 03       	fmulsu	r22, r16
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	64 00       	.word	0x0064	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	0a 00       	.word	0x000a	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	01 00       	.word	0x0001	; ????
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	2c 76       	andi	r18, 0x6C	; 108
      de:	d8 88       	ldd	r13, Y+16	; 0x10
      e0:	dc 67       	ori	r29, 0x7C	; 124
      e2:	4f 08       	sbc	r4, r15
      e4:	23 df       	rcall	.-442    	; 0xffffff2c <__eeprom_end+0xff7eff2c>
      e6:	c1 df       	rcall	.-126    	; 0x6a <__SREG__+0x2b>
      e8:	ae 59       	subi	r26, 0x9E	; 158
      ea:	e1 b1       	in	r30, 0x01	; 1
      ec:	b7 96       	adiw	r30, 0x27	; 39
      ee:	e5 e3       	ldi	r30, 0x35	; 53
      f0:	e4 53       	subi	r30, 0x34	; 52
      f2:	c6 3a       	cpi	r28, 0xA6	; 166
      f4:	e6 51       	subi	r30, 0x16	; 22
      f6:	99 76       	andi	r25, 0x69	; 105
      f8:	96 e8       	ldi	r25, 0x86	; 134
      fa:	e6 c2       	rjmp	.+1484   	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
      fc:	84 26       	eor	r8, r20
      fe:	eb 89       	ldd	r30, Y+19	; 0x13
     100:	8c 9b       	sbis	0x11, 4	; 17
     102:	62 ed       	ldi	r22, 0xD2	; 210
     104:	40 7c       	andi	r20, 0xC0	; 192
     106:	6f fc       	.word	0xfc6f	; ????
     108:	ef bc       	out	0x2f, r14	; 47
     10a:	9c 9f       	mul	r25, r28
     10c:	40 f2       	brcs	.-112    	; 0x9e <__trampolines_end+0x1c>
     10e:	ba a5       	ldd	r27, Y+42	; 0x2a
     110:	6f a5       	ldd	r22, Y+47	; 0x2f
     112:	f4 90       	lpm	r15, Z
     114:	05 5a       	subi	r16, 0xA5	; 165
     116:	2a f7       	brpl	.-54     	; 0xe2 <__trampolines_end+0x60>
     118:	5c 93       	st	X, r21
     11a:	6b 6c       	ori	r22, 0xCB	; 203
     11c:	f9 67       	ori	r31, 0x79	; 121
     11e:	6d c1       	rjmp	.+730    	; 0x3fa <Gyro_Init+0xc8>
     120:	1b fc       	.word	0xfc1b	; ????
     122:	e0 e4       	ldi	r30, 0x40	; 64
     124:	0d 47       	sbci	r16, 0x7D	; 125
     126:	fe f5       	brtc	.+126    	; 0x1a6 <.do_clear_bss_loop>
     128:	20 e6       	ldi	r18, 0x60	; 96
     12a:	b5 00       	.word	0x00b5	; ????
     12c:	d0 ed       	ldi	r29, 0xD0	; 208
     12e:	90 2e       	mov	r9, r16
     130:	03 00       	.word	0x0003	; ????
     132:	94 35       	cpi	r25, 0x54	; 84
     134:	77 05       	cpc	r23, r7
     136:	00 80       	ld	r0, Z
     138:	84 1e       	adc	r8, r20
     13a:	08 00       	.word	0x0008	; ????
     13c:	00 20       	and	r0, r0
     13e:	4e 0a       	sbc	r4, r30
     140:	00 00       	nop
     142:	00 c8       	rjmp	.-4096   	; 0xfffff144 <__eeprom_end+0xff7ef144>
     144:	0c 33       	cpi	r16, 0x3C	; 60
     146:	33 33       	cpi	r19, 0x33	; 51
     148:	33 0f       	add	r19, r19
     14a:	98 6e       	ori	r25, 0xE8	; 232
     14c:	12 83       	std	Z+2, r17	; 0x02
     14e:	11 41       	sbci	r17, 0x11	; 17
     150:	ef 8d       	ldd	r30, Y+31	; 0x1f
     152:	21 14       	cp	r2, r1
     154:	89 3b       	cpi	r24, 0xB9	; 185
     156:	e6 55       	subi	r30, 0x56	; 86
     158:	16 cf       	rjmp	.-468    	; 0xffffff86 <__eeprom_end+0xff7eff86>
     15a:	fe e6       	ldi	r31, 0x6E	; 110
     15c:	db 18       	sub	r13, r11
     15e:	d1 84       	ldd	r13, Z+9	; 0x09
     160:	4b 38       	cpi	r20, 0x8B	; 139
     162:	1b f7       	brvc	.-58     	; 0x12a <__trampolines_end+0xa8>
     164:	7c 1d       	adc	r23, r12
     166:	90 1d       	adc	r25, r0
     168:	a4 bb       	out	0x14, r26	; 20
     16a:	e4 24       	eor	r14, r4
     16c:	20 32       	cpi	r18, 0x20	; 32
     16e:	84 72       	andi	r24, 0x24	; 36
     170:	5e 22       	and	r5, r30
     172:	81 00       	.word	0x0081	; ????
     174:	c9 f1       	breq	.+114    	; 0x1e8 <I2C_Repeated_Start+0x26>
     176:	24 ec       	ldi	r18, 0xC4	; 196
     178:	a1 e5       	ldi	r26, 0x51	; 81
     17a:	3d 27       	eor	r19, r29

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf e5       	ldi	r28, 0x5F	; 95
     182:	d8 e0       	ldi	r29, 0x08	; 8
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	a0 e6       	ldi	r26, 0x60	; 96
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	e2 e3       	ldi	r30, 0x32	; 50
     190:	f7 e2       	ldi	r31, 0x27	; 39
     192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x10>
     194:	05 90       	lpm	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	a6 36       	cpi	r26, 0x66	; 102
     19a:	b1 07       	cpc	r27, r17
     19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0xc>

0000019e <__do_clear_bss>:
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	a6 e6       	ldi	r26, 0x66	; 102
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
     1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
     1a8:	a7 3e       	cpi	r26, 0xE7	; 231
     1aa:	b2 07       	cpc	r27, r18
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>
     1ae:	0e 94 f7 06 	call	0xdee	; 0xdee <main>
     1b2:	0c 94 97 13 	jmp	0x272e	; 0x272e <_exit>

000001b6 <__bad_interrupt>:
     1b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ba <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1ba:	11 b8       	out	0x01, r1	; 1
     1bc:	8c e0       	ldi	r24, 0x0C	; 12
     1be:	80 b9       	out	0x00, r24	; 0
     1c0:	08 95       	ret

000001c2 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     1c2:	94 ea       	ldi	r25, 0xA4	; 164
     1c4:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     1c6:	06 b6       	in	r0, 0x36	; 54
     1c8:	07 fe       	sbrs	r0, 7
     1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1cc:	91 b1       	in	r25, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     1ce:	98 7f       	andi	r25, 0xF8	; 248
     1d0:	90 31       	cpi	r25, 0x10	; 16
     1d2:	71 f4       	brne	.+28     	; 0x1f0 <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     1d4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     1d6:	84 e8       	ldi	r24, 0x84	; 132
     1d8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     1da:	06 b6       	in	r0, 0x36	; 54
     1dc:	07 fe       	sbrs	r0, 7
     1de:	fd cf       	rjmp	.-6      	; 0x1da <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1e0:	81 b1       	in	r24, 0x01	; 1
     1e2:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     1e4:	80 34       	cpi	r24, 0x40	; 64
     1e6:	31 f0       	breq	.+12     	; 0x1f4 <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     1e8:	80 32       	cpi	r24, 0x20	; 32
     1ea:	31 f0       	breq	.+12     	; 0x1f8 <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     1f8:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1fa:	08 95       	ret

000001fc <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     1fc:	84 e9       	ldi	r24, 0x94	; 148
     1fe:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     200:	06 b6       	in	r0, 0x36	; 54
     202:	04 fc       	sbrc	r0, 4
     204:	fd cf       	rjmp	.-6      	; 0x200 <I2C_Stop+0x4>
}
     206:	08 95       	ret

00000208 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	18 2f       	mov	r17, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     210:	c4 ea       	ldi	r28, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     212:	d4 e8       	ldi	r29, 0x84	; 132
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     214:	c6 bf       	out	0x36, r28	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     216:	06 b6       	in	r0, 0x36	; 54
     218:	07 fe       	sbrs	r0, 7
     21a:	fd cf       	rjmp	.-6      	; 0x216 <I2C_Start_Wait+0xe>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     21c:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     21e:	88 7f       	andi	r24, 0xF8	; 248
     220:	88 30       	cpi	r24, 0x08	; 8
     222:	c1 f7       	brne	.-16     	; 0x214 <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     224:	13 b9       	out	0x03, r17	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     226:	d6 bf       	out	0x36, r29	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     228:	06 b6       	in	r0, 0x36	; 54
     22a:	07 fe       	sbrs	r0, 7
     22c:	fd cf       	rjmp	.-6      	; 0x228 <I2C_Start_Wait+0x20>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     22e:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     230:	88 7f       	andi	r24, 0xF8	; 248
     232:	88 31       	cpi	r24, 0x18	; 24
     234:	19 f0       	breq	.+6      	; 0x23c <I2C_Start_Wait+0x34>
		{
			I2C_Stop();										/* If not then generate stop condition */
     236:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>
			continue;										/* continue with start loop again */
     23a:	ec cf       	rjmp	.-40     	; 0x214 <I2C_Start_Wait+0xc>
		}
		break;												/* If yes then break loop */
	}
}
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	08 95       	ret

00000244 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     244:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     246:	84 e8       	ldi	r24, 0x84	; 132
     248:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     24a:	06 b6       	in	r0, 0x36	; 54
     24c:	07 fe       	sbrs	r0, 7
     24e:	fd cf       	rjmp	.-6      	; 0x24a <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     250:	81 b1       	in	r24, 0x01	; 1
     252:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     254:	88 32       	cpi	r24, 0x28	; 40
     256:	21 f0       	breq	.+8      	; 0x260 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     258:	80 33       	cpi	r24, 0x30	; 48
     25a:	21 f0       	breq	.+8      	; 0x264 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     264:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     266:	08 95       	ret

00000268 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     268:	84 ec       	ldi	r24, 0xC4	; 196
     26a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     26c:	06 b6       	in	r0, 0x36	; 54
     26e:	07 fe       	sbrs	r0, 7
     270:	fd cf       	rjmp	.-6      	; 0x26c <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     272:	83 b1       	in	r24, 0x03	; 3
}	
     274:	08 95       	ret

00000276 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     276:	84 e8       	ldi	r24, 0x84	; 132
     278:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     27a:	06 b6       	in	r0, 0x36	; 54
     27c:	07 fe       	sbrs	r0, 7
     27e:	fd cf       	rjmp	.-6      	; 0x27a <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     280:	83 b1       	in	r24, 0x03	; 3
}	
     282:	08 95       	ret

00000284 <PWM_Init>:
void ADC_Init();
uint16_t ADC_GetAdcValue(uint8_t v_adcChannel_u8);

void PWM_Init()
{
    TCNT0 = 0x00;
     284:	12 be       	out	0x32, r1	; 50
	TCNT2 = 0X00;	
     286:	14 bc       	out	0x24, r1	; 36
    DDRB |= 1 << 3;
     288:	bb 9a       	sbi	0x17, 3	; 23
	DDRD |= 1 << 7;
     28a:	8f 9a       	sbi	0x11, 7	; 17
     28c:	08 95       	ret

0000028e <PWM_SetDutyCycle>:
}

void PWM_SetDutyCycle(double dutyCycle)
{
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
	
	dutyCycle = 2.55 * dutyCycle;
     29e:	23 e3       	ldi	r18, 0x33	; 51
     2a0:	33 e3       	ldi	r19, 0x33	; 51
     2a2:	43 e2       	ldi	r20, 0x23	; 35
     2a4:	50 e4       	ldi	r21, 0x40	; 64
     2a6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     2aa:	6b 01       	movw	r12, r22
     2ac:	7c 01       	movw	r14, r24
	
	double l_val, r_val;
	
	l_val = 1.08 * dutyCycle;
     2ae:	21 e7       	ldi	r18, 0x71	; 113
     2b0:	3d e3       	ldi	r19, 0x3D	; 61
     2b2:	4a e8       	ldi	r20, 0x8A	; 138
     2b4:	5f e3       	ldi	r21, 0x3F	; 63
     2b6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     2ba:	4b 01       	movw	r8, r22
     2bc:	5c 01       	movw	r10, r24
	r_val = dutyCycle;
	
	if(l_val > 255) l_val = 255;
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	4f e7       	ldi	r20, 0x7F	; 127
     2c4:	53 e4       	ldi	r21, 0x43	; 67
     2c6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__gesf2>
     2ca:	18 16       	cp	r1, r24
     2cc:	44 f4       	brge	.+16     	; 0x2de <PWM_SetDutyCycle+0x50>
     2ce:	0f 2e       	mov	r0, r31
     2d0:	81 2c       	mov	r8, r1
     2d2:	91 2c       	mov	r9, r1
     2d4:	ff e7       	ldi	r31, 0x7F	; 127
     2d6:	af 2e       	mov	r10, r31
     2d8:	f3 e4       	ldi	r31, 0x43	; 67
     2da:	bf 2e       	mov	r11, r31
     2dc:	f0 2d       	mov	r31, r0
	if(r_val > 255) r_val = 255;
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	4f e7       	ldi	r20, 0x7F	; 127
     2e4:	53 e4       	ldi	r21, 0x43	; 67
     2e6:	c7 01       	movw	r24, r14
     2e8:	b6 01       	movw	r22, r12
     2ea:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__gesf2>
     2ee:	18 16       	cp	r1, r24
     2f0:	44 f4       	brge	.+16     	; 0x302 <PWM_SetDutyCycle+0x74>
     2f2:	0f 2e       	mov	r0, r31
     2f4:	c1 2c       	mov	r12, r1
     2f6:	d1 2c       	mov	r13, r1
     2f8:	ff e7       	ldi	r31, 0x7F	; 127
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f3 e4       	ldi	r31, 0x43	; 67
     2fe:	ff 2e       	mov	r15, r31
     300:	f0 2d       	mov	r31, r0
	
	OCR0 = (uint8_t) l_val;
     302:	c5 01       	movw	r24, r10
     304:	b4 01       	movw	r22, r8
     306:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__fixunssfsi>
     30a:	6c bf       	out	0x3c, r22	; 60
	OCR2 = (uint8_t) r_val;
     30c:	c7 01       	movw	r24, r14
     30e:	b6 01       	movw	r22, r12
     310:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__fixunssfsi>
     314:	63 bd       	out	0x23, r22	; 35
}
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	df 90       	pop	r13
     31c:	cf 90       	pop	r12
     31e:	bf 90       	pop	r11
     320:	af 90       	pop	r10
     322:	9f 90       	pop	r9
     324:	8f 90       	pop	r8
     326:	08 95       	ret

00000328 <PWM_Start>:

void PWM_Start()
{
	TCCR0 = (1<<WGM00)|(1<<COM01)|(1<<CS01)|(1<<CS00);
     328:	83 e6       	ldi	r24, 0x63	; 99
     32a:	83 bf       	out	0x33, r24	; 51
	TCCR2 = (1<<WGM20)|(1<<COM21)|(1<<CS22);
     32c:	84 e6       	ldi	r24, 0x64	; 100
     32e:	85 bd       	out	0x25, r24	; 37
     330:	08 95       	ret

00000332 <Gyro_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     332:	2f ef       	ldi	r18, 0xFF	; 255
     334:	82 e5       	ldi	r24, 0x52	; 82
     336:	97 e0       	ldi	r25, 0x07	; 7
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	80 40       	sbci	r24, 0x00	; 0
     33c:	90 40       	sbci	r25, 0x00	; 0
     33e:	e1 f7       	brne	.-8      	; 0x338 <Gyro_Init+0x6>
     340:	00 c0       	rjmp	.+0      	; 0x342 <Gyro_Init+0x10>
     342:	00 00       	nop

void Gyro_Init()		 									/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     344:	80 ed       	ldi	r24, 0xD0	; 208
     346:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     34a:	89 e1       	ldi	r24, 0x19	; 25
     34c:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     350:	87 e0       	ldi	r24, 0x07	; 7
     352:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     356:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     35a:	80 ed       	ldi	r24, 0xD0	; 208
     35c:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     360:	8b e6       	ldi	r24, 0x6B	; 107
     362:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     36c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     370:	80 ed       	ldi	r24, 0xD0	; 208
     372:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     376:	8a e1       	ldi	r24, 0x1A	; 26
     378:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     382:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     386:	80 ed       	ldi	r24, 0xD0	; 208
     388:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);
     38c:	8b e1       	ldi	r24, 0x1B	; 27
     38e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x18);
     392:	88 e1       	ldi	r24, 0x18	; 24
     394:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     398:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     39c:	80 ed       	ldi	r24, 0xD0	; 208
     39e:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(ACCEL_CONFIG);							/* Write to Accelo configuration register */
     3a2:	8c e1       	ldi	r24, 0x1C	; 28
     3a4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Full scale range +/- 2g */
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     3ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     3b2:	80 ed       	ldi	r24, 0xD0	; 208
     3b4:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(MOT_THR);									/* Write to motion threshold register */
     3b8:	8f e1       	ldi	r24, 0x1F	; 31
     3ba:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Motion detection threshold value */
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     3c4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     3c8:	80 ed       	ldi	r24, 0xD0	; 208
     3ca:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(FIFO_EN);									/* Write to FIFO enable register */
     3ce:	83 e2       	ldi	r24, 0x23	; 35
     3d0:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* FIFO disabled */
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     3da:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     3de:	80 ed       	ldi	r24, 0xD0	; 208
     3e0:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(FF_THR);									/* Write to free fall threshold register */
     3e4:	8d e1       	ldi	r24, 0x1D	; 29
     3e6:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Free fall threshold value */
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     3f0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     3f4:	80 ed       	ldi	r24, 0xD0	; 208
     3f6:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(FF_DUR);									/* Write to free fall duration register */
     3fa:	8e e1       	ldi	r24, 0x1E	; 30
     3fc:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Free fall duration counter */
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     406:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     40a:	80 ed       	ldi	r24, 0xD0	; 208
     40c:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(MOT_DUR);									/* Write to motion duration register */
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Motion detection duration counter */
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     41c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     420:	80 ed       	ldi	r24, 0xD0	; 208
     422:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(ZRMOT_DUR);								/* Write to zero motion duration register */
     426:	82 e2       	ldi	r24, 0x22	; 34
     428:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Zero motion detection duration counter */
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     432:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     436:	80 ed       	ldi	r24, 0xD0	; 208
     438:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(ZRMOT_THR);								/* Write to zero motion threshold register */
     43c:	81 e2       	ldi	r24, 0x21	; 33
     43e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Zero motion detection threshold value */
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     448:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     44c:	80 ed       	ldi	r24, 0xD0	; 208
     44e:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_MST_CTRL);							/* Write to I2C Master control register */
     452:	84 e2       	ldi	r24, 0x24	; 36
     454:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);									/* Disable multi-master */
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     45e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     462:	80 ed       	ldi	r24, 0xD0	; 208
     464:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV0_REG);							/* Write to I2C Slave0 data register */
     468:	86 e2       	ldi	r24, 0x26	; 38
     46a:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     474:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     478:	80 ed       	ldi	r24, 0xD0	; 208
     47a:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV0_ADDR);							/* Write to I2C Slave0 address register */
     47e:	85 e2       	ldi	r24, 0x25	; 37
     480:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     48a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     48e:	80 ed       	ldi	r24, 0xD0	; 208
     490:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV0_CTRL);							/* Write to I2C Slave0 Control register */
     494:	87 e2       	ldi	r24, 0x27	; 39
     496:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     4a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     4a4:	80 ed       	ldi	r24, 0xD0	; 208
     4a6:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV1_REG);							/* Write to I2C Slave1 data register */
     4aa:	89 e2       	ldi	r24, 0x29	; 41
     4ac:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     4b6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     4ba:	80 ed       	ldi	r24, 0xD0	; 208
     4bc:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV1_ADDR);							/* Write to I2C Slave1 address register */
     4c0:	88 e2       	ldi	r24, 0x28	; 40
     4c2:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     4cc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     4d0:	80 ed       	ldi	r24, 0xD0	; 208
     4d2:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV1_CTRL);							/* Write to I2C Slave1 control register */
     4d6:	8a e2       	ldi	r24, 0x2A	; 42
     4d8:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     4e2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     4e6:	80 ed       	ldi	r24, 0xD0	; 208
     4e8:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV2_REG);							/* Write to I2C Slave2 data register */
     4ec:	8c e2       	ldi	r24, 0x2C	; 44
     4ee:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     4f8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     4fc:	80 ed       	ldi	r24, 0xD0	; 208
     4fe:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV2_REG);							/* Write to I2C Slave2 address register */
     502:	8c e2       	ldi	r24, 0x2C	; 44
     504:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     50e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     512:	80 ed       	ldi	r24, 0xD0	; 208
     514:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV2_CTRL);							/* Write to I2C Slave2 control register */
     518:	8d e2       	ldi	r24, 0x2D	; 45
     51a:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     524:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     528:	80 ed       	ldi	r24, 0xD0	; 208
     52a:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV3_REG);							/* Write to I2C Slave3 data register */
     52e:	8f e2       	ldi	r24, 0x2F	; 47
     530:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     53a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     53e:	80 ed       	ldi	r24, 0xD0	; 208
     540:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV3_ADDR);							/* Write to I2C Slave3 address register */
     544:	8e e2       	ldi	r24, 0x2E	; 46
     546:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     550:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     554:	80 ed       	ldi	r24, 0xD0	; 208
     556:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV3_CTRL);							/* Write to I2C Slave3 control register */
     55a:	80 e3       	ldi	r24, 0x30	; 48
     55c:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     566:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     56a:	80 ed       	ldi	r24, 0xD0	; 208
     56c:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV4_REG);							/* Write to I2C Slave4 data register */
     570:	82 e3       	ldi	r24, 0x32	; 50
     572:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     57c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     580:	80 ed       	ldi	r24, 0xD0	; 208
     582:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV4_ADDR);							/* Write to I2C Slave4 address register */
     586:	81 e3       	ldi	r24, 0x31	; 49
     588:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     592:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     596:	80 ed       	ldi	r24, 0xD0	; 208
     598:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV4_CTRL);							/* Write to I2C Slave4 control register */
     59c:	84 e3       	ldi	r24, 0x34	; 52
     59e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     5a8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     5ac:	80 ed       	ldi	r24, 0xD0	; 208
     5ae:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV4_DO);								/* Write to I2C Slave4 data out register */
     5b2:	83 e3       	ldi	r24, 0x33	; 51
     5b4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     5be:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     5c2:	80 ed       	ldi	r24, 0xD0	; 208
     5c4:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV4_DI);								/* Write to I2C Slave4 data in register */
     5c8:	85 e3       	ldi	r24, 0x35	; 53
     5ca:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     5d4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     5d8:	80 ed       	ldi	r24, 0xD0	; 208
     5da:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(INT_PIN_CFG);								/* Write to interrupt pin configuration register */
     5de:	87 e3       	ldi	r24, 0x37	; 55
     5e0:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     5ea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     5ee:	80 ed       	ldi	r24, 0xD0	; 208
     5f0:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     5f4:	88 e3       	ldi	r24, 0x38	; 56
     5f6:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x01);
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     600:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     604:	80 ed       	ldi	r24, 0xD0	; 208
     606:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV0_DO);								/* Write to I2C Slave0 data out register */
     60a:	83 e6       	ldi	r24, 0x63	; 99
     60c:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     616:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     61a:	80 ed       	ldi	r24, 0xD0	; 208
     61c:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV1_DO);								/* Write to I2C Slave1 data out register */
     620:	84 e6       	ldi	r24, 0x64	; 100
     622:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     62c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     630:	80 ed       	ldi	r24, 0xD0	; 208
     632:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV2_DO);								/* Write to I2C Slave2 data out register */
     636:	85 e6       	ldi	r24, 0x65	; 101
     638:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     642:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     646:	80 ed       	ldi	r24, 0xD0	; 208
     648:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_SLV3_DO);								/* Write to I2C Slave3 data out register */
     64c:	86 e6       	ldi	r24, 0x66	; 102
     64e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     658:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     65c:	80 ed       	ldi	r24, 0xD0	; 208
     65e:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(I2C_MST_DELAY_CTRL);						/* Write to I2C Master delay control register */
     662:	87 e6       	ldi	r24, 0x67	; 103
     664:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     66e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     672:	80 ed       	ldi	r24, 0xD0	; 208
     674:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(SIGNAL_PATH_RESET);						/* Write to Signal Path Reset register */
     678:	88 e6       	ldi	r24, 0x68	; 104
     67a:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     684:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     688:	80 ed       	ldi	r24, 0xD0	; 208
     68a:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(MOT_DETECT_CTRL);							/* Write to Motion detection control register */
     68e:	89 e6       	ldi	r24, 0x69	; 105
     690:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     69a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     69e:	80 ed       	ldi	r24, 0xD0	; 208
     6a0:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(USER_CTRL);								/* Write to User control register */
     6a4:	8a e6       	ldi	r24, 0x6A	; 106
     6a6:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     6b0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     6b4:	80 ed       	ldi	r24, 0xD0	; 208
     6b6:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_2);								/* Write to power management register */
     6ba:	8c e6       	ldi	r24, 0x6C	; 108
     6bc:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     6c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>

	I2C_Start_Wait(0xD0);
     6ca:	80 ed       	ldi	r24, 0xD0	; 208
     6cc:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(FIFO_R_W);								/* Write to FIFO R/W register */
     6d0:	84 e7       	ldi	r24, 0x74	; 116
     6d2:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Write(0x00);
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Stop();
     6dc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>
     6e0:	08 95       	ret

000006e2 <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     6e2:	80 ed       	ldi	r24, 0xD0	; 208
     6e4:	0e 94 04 01 	call	0x208	; 0x208 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
     6e8:	8b e3       	ldi	r24, 0x3B	; 59
     6ea:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     6ee:	81 ed       	ldi	r24, 0xD1	; 209
     6f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_Repeated_Start>
     6f4:	08 95       	ret

000006f6 <Read_RawValue>:
}

void Read_RawValue()  //read the raw values of the sensor
{
     6f6:	cf 93       	push	r28
	MPU_Start_Loc();									/* Read Gyro values */
     6f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     6fc:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     700:	c8 2f       	mov	r28, r24
     702:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     706:	6c 2f       	mov	r22, r28
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	76 2f       	mov	r23, r22
     70c:	66 27       	eor	r22, r22
     70e:	68 2b       	or	r22, r24
     710:	07 2e       	mov	r0, r23
     712:	00 0c       	add	r0, r0
     714:	88 0b       	sbc	r24, r24
     716:	99 0b       	sbc	r25, r25
     718:	0e 94 89 0c 	call	0x1912	; 0x1912 <__floatsisf>
     71c:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <Acc_x>
     720:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <Acc_x+0x1>
     724:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <Acc_x+0x2>
     728:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     72c:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     730:	c8 2f       	mov	r28, r24
     732:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     736:	6c 2f       	mov	r22, r28
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	76 2f       	mov	r23, r22
     73c:	66 27       	eor	r22, r22
     73e:	68 2b       	or	r22, r24
     740:	07 2e       	mov	r0, r23
     742:	00 0c       	add	r0, r0
     744:	88 0b       	sbc	r24, r24
     746:	99 0b       	sbc	r25, r25
     748:	0e 94 89 0c 	call	0x1912	; 0x1912 <__floatsisf>
     74c:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <Acc_y>
     750:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <Acc_y+0x1>
     754:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Acc_y+0x2>
     758:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     75c:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     760:	c8 2f       	mov	r28, r24
     762:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     766:	6c 2f       	mov	r22, r28
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	76 2f       	mov	r23, r22
     76c:	66 27       	eor	r22, r22
     76e:	68 2b       	or	r22, r24
     770:	07 2e       	mov	r0, r23
     772:	00 0c       	add	r0, r0
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	0e 94 89 0c 	call	0x1912	; 0x1912 <__floatsisf>
     77c:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <Acc_z>
     780:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <Acc_z+0x1>
     784:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Acc_z+0x2>
     788:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <Acc_z+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     78c:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     790:	c8 2f       	mov	r28, r24
     792:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     796:	6c 2f       	mov	r22, r28
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	76 2f       	mov	r23, r22
     79c:	66 27       	eor	r22, r22
     79e:	68 2b       	or	r22, r24
     7a0:	07 2e       	mov	r0, r23
     7a2:	00 0c       	add	r0, r0
     7a4:	88 0b       	sbc	r24, r24
     7a6:	99 0b       	sbc	r25, r25
     7a8:	0e 94 89 0c 	call	0x1912	; 0x1912 <__floatsisf>
     7ac:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <Temperature>
     7b0:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <Temperature+0x1>
     7b4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Temperature+0x2>
     7b8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     7bc:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     7c0:	c8 2f       	mov	r28, r24
     7c2:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     7c6:	6c 2f       	mov	r22, r28
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	76 2f       	mov	r23, r22
     7cc:	66 27       	eor	r22, r22
     7ce:	68 2b       	or	r22, r24
     7d0:	07 2e       	mov	r0, r23
     7d2:	00 0c       	add	r0, r0
     7d4:	88 0b       	sbc	r24, r24
     7d6:	99 0b       	sbc	r25, r25
     7d8:	0e 94 89 0c 	call	0x1912	; 0x1912 <__floatsisf>
     7dc:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <Gyro_x>
     7e0:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <Gyro_x+0x1>
     7e4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Gyro_x+0x2>
     7e8:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     7ec:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     7f0:	c8 2f       	mov	r28, r24
     7f2:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     7f6:	6c 2f       	mov	r22, r28
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	76 2f       	mov	r23, r22
     7fc:	66 27       	eor	r22, r22
     7fe:	68 2b       	or	r22, r24
     800:	07 2e       	mov	r0, r23
     802:	00 0c       	add	r0, r0
     804:	88 0b       	sbc	r24, r24
     806:	99 0b       	sbc	r25, r25
     808:	0e 94 89 0c 	call	0x1912	; 0x1912 <__floatsisf>
     80c:	60 93 cb 00 	sts	0x00CB, r22	; 0x8000cb <Gyro_y>
     810:	70 93 cc 00 	sts	0x00CC, r23	; 0x8000cc <Gyro_y+0x1>
     814:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <Gyro_y+0x2>
     818:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     81c:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Read_Ack>
     820:	c8 2f       	mov	r28, r24
     822:	0e 94 3b 01 	call	0x276	; 0x276 <I2C_Read_Nack>
     826:	6c 2f       	mov	r22, r28
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	76 2f       	mov	r23, r22
     82c:	66 27       	eor	r22, r22
     82e:	68 2b       	or	r22, r24
     830:	07 2e       	mov	r0, r23
     832:	00 0c       	add	r0, r0
     834:	88 0b       	sbc	r24, r24
     836:	99 0b       	sbc	r25, r25
     838:	0e 94 89 0c 	call	0x1912	; 0x1912 <__floatsisf>
     83c:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <Gyro_z>
     840:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <Gyro_z+0x1>
     844:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Gyro_z+0x2>
     848:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <Gyro_z+0x3>
	I2C_Stop();
     84c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Stop>
	
	Acc_x = Acc_x/16384.0;	//Xa						/* Divide raw value by sensitivity scale factor to get real values */
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e8       	ldi	r20, 0x80	; 128
     856:	58 e3       	ldi	r21, 0x38	; 56
     858:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <Acc_x>
     85c:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <Acc_x+0x1>
     860:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <Acc_x+0x2>
     864:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <Acc_x+0x3>
     868:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     86c:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <Acc_x>
     870:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <Acc_x+0x1>
     874:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <Acc_x+0x2>
     878:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <Acc_x+0x3>
	Acc_y = Acc_y/16384.0;	//Ya
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	58 e3       	ldi	r21, 0x38	; 56
     884:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <Acc_y>
     888:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <Acc_y+0x1>
     88c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Acc_y+0x2>
     890:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Acc_y+0x3>
     894:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     898:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <Acc_y>
     89c:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <Acc_y+0x1>
     8a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Acc_y+0x2>
     8a4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <Acc_y+0x3>
	Acc_z = Acc_z/16384.0;	//Za
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e8       	ldi	r20, 0x80	; 128
     8ae:	58 e3       	ldi	r21, 0x38	; 56
     8b0:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Acc_z>
     8b4:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Acc_z+0x1>
     8b8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Acc_z+0x2>
     8bc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <Acc_z+0x3>
     8c0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     8c4:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <Acc_z>
     8c8:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <Acc_z+0x1>
     8cc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Acc_z+0x2>
     8d0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <Acc_z+0x3>
	
	Gyro_x = Gyro_x/16.4;	//Xg
     8d4:	23 e3       	ldi	r18, 0x33	; 51
     8d6:	33 e3       	ldi	r19, 0x33	; 51
     8d8:	43 e8       	ldi	r20, 0x83	; 131
     8da:	51 e4       	ldi	r21, 0x41	; 65
     8dc:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <Gyro_x>
     8e0:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <Gyro_x+0x1>
     8e4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Gyro_x+0x2>
     8e8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Gyro_x+0x3>
     8ec:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     8f0:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <Gyro_x>
     8f4:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <Gyro_x+0x1>
     8f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Gyro_x+0x2>
     8fc:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Gyro_x+0x3>
	Gyro_y = Gyro_y/16.4;	//Yg
     900:	23 e3       	ldi	r18, 0x33	; 51
     902:	33 e3       	ldi	r19, 0x33	; 51
     904:	43 e8       	ldi	r20, 0x83	; 131
     906:	51 e4       	ldi	r21, 0x41	; 65
     908:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <Gyro_y>
     90c:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <Gyro_y+0x1>
     910:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <Gyro_y+0x2>
     914:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <Gyro_y+0x3>
     918:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     91c:	60 93 cb 00 	sts	0x00CB, r22	; 0x8000cb <Gyro_y>
     920:	70 93 cc 00 	sts	0x00CC, r23	; 0x8000cc <Gyro_y+0x1>
     924:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <Gyro_y+0x2>
     928:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <Gyro_y+0x3>
	Gyro_z = Gyro_z/16.4;	//Zg
     92c:	23 e3       	ldi	r18, 0x33	; 51
     92e:	33 e3       	ldi	r19, 0x33	; 51
     930:	43 e8       	ldi	r20, 0x83	; 131
     932:	51 e4       	ldi	r21, 0x41	; 65
     934:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <Gyro_z>
     938:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <Gyro_z+0x1>
     93c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Gyro_z+0x2>
     940:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <Gyro_z+0x3>
     944:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     948:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <Gyro_z>
     94c:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <Gyro_z+0x1>
     950:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Gyro_z+0x2>
     954:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <Gyro_z+0x3>
}
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <calculate_IMU_error>:

void calculate_IMU_error(void) {
     95c:	4f 92       	push	r4
     95e:	5f 92       	push	r5
     960:	6f 92       	push	r6
     962:	7f 92       	push	r7
     964:	8f 92       	push	r8
     966:	9f 92       	push	r9
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	2e 97       	sbiw	r28, 0x0e	; 14
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	28 ec       	ldi	r18, 0xC8	; 200
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	3e 87       	std	Y+14, r19	; 0x0e
     98e:	2d 87       	std	Y+13, r18	; 0x0d
	
	int c = 0;
	while (c < 200) {
		
		Read_RawValue();
     990:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Read_RawValue>
		
		AccErrorX = AccErrorX + ((atan((Acc_y) / sqrt(pow((Acc_x), 2) + pow((Acc_z), 2))) * RAD_TO_DEG));
     994:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <Acc_y>
     998:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <Acc_y+0x1>
     99c:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <Acc_y+0x2>
     9a0:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <Acc_y+0x3>
     9a4:	40 90 a3 00 	lds	r4, 0x00A3	; 0x8000a3 <Acc_x>
     9a8:	50 90 a4 00 	lds	r5, 0x00A4	; 0x8000a4 <Acc_x+0x1>
     9ac:	60 90 a5 00 	lds	r6, 0x00A5	; 0x8000a5 <Acc_x+0x2>
     9b0:	70 90 a6 00 	lds	r7, 0x00A6	; 0x8000a6 <Acc_x+0x3>
     9b4:	80 90 6a 00 	lds	r8, 0x006A	; 0x80006a <Acc_z>
     9b8:	90 90 6b 00 	lds	r9, 0x006B	; 0x80006b <Acc_z+0x1>
     9bc:	a0 90 6c 00 	lds	r10, 0x006C	; 0x80006c <Acc_z+0x2>
     9c0:	b0 90 6d 00 	lds	r11, 0x006D	; 0x80006d <Acc_z+0x3>
     9c4:	a5 01       	movw	r20, r10
     9c6:	94 01       	movw	r18, r8
     9c8:	c5 01       	movw	r24, r10
     9ca:	b4 01       	movw	r22, r8
     9cc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     9d0:	69 83       	std	Y+1, r22	; 0x01
     9d2:	7a 83       	std	Y+2, r23	; 0x02
     9d4:	8b 83       	std	Y+3, r24	; 0x03
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	a3 01       	movw	r20, r6
     9da:	92 01       	movw	r18, r4
     9dc:	c3 01       	movw	r24, r6
     9de:	b2 01       	movw	r22, r4
     9e0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     9e4:	6d 83       	std	Y+5, r22	; 0x05
     9e6:	7e 83       	std	Y+6, r23	; 0x06
     9e8:	8f 83       	std	Y+7, r24	; 0x07
     9ea:	98 87       	std	Y+8, r25	; 0x08
     9ec:	29 81       	ldd	r18, Y+1	; 0x01
     9ee:	3a 81       	ldd	r19, Y+2	; 0x02
     9f0:	4b 81       	ldd	r20, Y+3	; 0x03
     9f2:	5c 81       	ldd	r21, Y+4	; 0x04
     9f4:	6d 81       	ldd	r22, Y+5	; 0x05
     9f6:	7e 81       	ldd	r23, Y+6	; 0x06
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     a00:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <sqrt>
     a04:	6d 83       	std	Y+5, r22	; 0x05
     a06:	7e 83       	std	Y+6, r23	; 0x06
     a08:	8f 83       	std	Y+7, r24	; 0x07
     a0a:	98 87       	std	Y+8, r25	; 0x08
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     a18:	0e 94 b2 0b 	call	0x1764	; 0x1764 <atan>
     a1c:	21 ee       	ldi	r18, 0xE1	; 225
     a1e:	3e e2       	ldi	r19, 0x2E	; 46
     a20:	45 e6       	ldi	r20, 0x65	; 101
     a22:	52 e4       	ldi	r21, 0x42	; 66
     a24:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     a28:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <AccErrorX>
     a2c:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <AccErrorX+0x1>
     a30:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <AccErrorX+0x2>
     a34:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <AccErrorX+0x3>
     a38:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     a3c:	69 87       	std	Y+9, r22	; 0x09
     a3e:	7a 87       	std	Y+10, r23	; 0x0a
     a40:	8b 87       	std	Y+11, r24	; 0x0b
     a42:	9c 87       	std	Y+12, r25	; 0x0c
     a44:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <AccErrorX>
     a48:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <AccErrorX+0x1>
     a4c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <AccErrorX+0x2>
     a50:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <AccErrorX+0x3>
		AccErrorY = AccErrorY + ((atan(-1 * (Acc_x) / sqrt(pow((Acc_y), 2) + pow((Acc_z), 2))) * RAD_TO_DEG));
     a54:	a7 01       	movw	r20, r14
     a56:	96 01       	movw	r18, r12
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     a60:	29 81       	ldd	r18, Y+1	; 0x01
     a62:	3a 81       	ldd	r19, Y+2	; 0x02
     a64:	4b 81       	ldd	r20, Y+3	; 0x03
     a66:	5c 81       	ldd	r21, Y+4	; 0x04
     a68:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     a6c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <sqrt>
     a70:	9b 01       	movw	r18, r22
     a72:	ac 01       	movw	r20, r24
     a74:	c3 01       	movw	r24, r6
     a76:	b2 01       	movw	r22, r4
     a78:	90 58       	subi	r25, 0x80	; 128
     a7a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     a7e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <atan>
     a82:	21 ee       	ldi	r18, 0xE1	; 225
     a84:	3e e2       	ldi	r19, 0x2E	; 46
     a86:	45 e6       	ldi	r20, 0x65	; 101
     a88:	52 e4       	ldi	r21, 0x42	; 66
     a8a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     a8e:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <AccErrorY>
     a92:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <AccErrorY+0x1>
     a96:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <AccErrorY+0x2>
     a9a:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <AccErrorY+0x3>
     a9e:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     aa2:	6b 01       	movw	r12, r22
     aa4:	7c 01       	movw	r14, r24
     aa6:	60 93 af 00 	sts	0x00AF, r22	; 0x8000af <AccErrorY>
     aaa:	70 93 b0 00 	sts	0x00B0, r23	; 0x8000b0 <AccErrorY+0x1>
     aae:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <AccErrorY+0x2>
     ab2:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <AccErrorY+0x3>
		AccErrorZ = AccErrorZ + ((atan((Acc_z) / sqrt(pow((Acc_x), 2) + pow((Acc_z), 2))) * RAD_TO_DEG));
     ab6:	2d 81       	ldd	r18, Y+5	; 0x05
     ab8:	3e 81       	ldd	r19, Y+6	; 0x06
     aba:	4f 81       	ldd	r20, Y+7	; 0x07
     abc:	58 85       	ldd	r21, Y+8	; 0x08
     abe:	c5 01       	movw	r24, r10
     ac0:	b4 01       	movw	r22, r8
     ac2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     ac6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <atan>
     aca:	21 ee       	ldi	r18, 0xE1	; 225
     acc:	3e e2       	ldi	r19, 0x2E	; 46
     ace:	45 e6       	ldi	r20, 0x65	; 101
     ad0:	52 e4       	ldi	r21, 0x42	; 66
     ad2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     ad6:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <AccErrorZ>
     ada:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <AccErrorZ+0x1>
     ade:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <AccErrorZ+0x2>
     ae2:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <AccErrorZ+0x3>
     ae6:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     aea:	2b 01       	movw	r4, r22
     aec:	3c 01       	movw	r6, r24
     aee:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <AccErrorZ>
     af2:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <AccErrorZ+0x1>
     af6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <AccErrorZ+0x2>
     afa:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <AccErrorZ+0x3>

		GyroErrorX = GyroErrorX + Gyro_x;
     afe:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <Gyro_x>
     b02:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <Gyro_x+0x1>
     b06:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <Gyro_x+0x2>
     b0a:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <Gyro_x+0x3>
     b0e:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <GyroErrorX>
     b12:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <GyroErrorX+0x1>
     b16:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <GyroErrorX+0x2>
     b1a:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <GyroErrorX+0x3>
     b1e:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     b22:	4b 01       	movw	r8, r22
     b24:	5c 01       	movw	r10, r24
     b26:	60 93 db 00 	sts	0x00DB, r22	; 0x8000db <GyroErrorX>
     b2a:	70 93 dc 00 	sts	0x00DC, r23	; 0x8000dc <GyroErrorX+0x1>
     b2e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <GyroErrorX+0x2>
     b32:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <GyroErrorX+0x3>
		GyroErrorY = GyroErrorY + Gyro_y;
     b36:	20 91 cb 00 	lds	r18, 0x00CB	; 0x8000cb <Gyro_y>
     b3a:	30 91 cc 00 	lds	r19, 0x00CC	; 0x8000cc <Gyro_y+0x1>
     b3e:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <Gyro_y+0x2>
     b42:	50 91 ce 00 	lds	r21, 0x00CE	; 0x8000ce <Gyro_y+0x3>
     b46:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <GyroErrorY>
     b4a:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <GyroErrorY+0x1>
     b4e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <GyroErrorY+0x2>
     b52:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <GyroErrorY+0x3>
     b56:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     b5a:	69 83       	std	Y+1, r22	; 0x01
     b5c:	7a 83       	std	Y+2, r23	; 0x02
     b5e:	8b 83       	std	Y+3, r24	; 0x03
     b60:	9c 83       	std	Y+4, r25	; 0x04
     b62:	60 93 c3 00 	sts	0x00C3, r22	; 0x8000c3 <GyroErrorY>
     b66:	70 93 c4 00 	sts	0x00C4, r23	; 0x8000c4 <GyroErrorY+0x1>
     b6a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <GyroErrorY+0x2>
     b6e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <GyroErrorY+0x3>
		GyroErrorZ = GyroErrorZ + Gyro_z;
     b72:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <Gyro_z>
     b76:	30 91 9b 00 	lds	r19, 0x009B	; 0x80009b <Gyro_z+0x1>
     b7a:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <Gyro_z+0x2>
     b7e:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <Gyro_z+0x3>
     b82:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <GyroErrorZ>
     b86:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <GyroErrorZ+0x1>
     b8a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <GyroErrorZ+0x2>
     b8e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <GyroErrorZ+0x3>
     b92:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     b96:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <GyroErrorZ>
     b9a:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <GyroErrorZ+0x1>
     b9e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <GyroErrorZ+0x2>
     ba2:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <GyroErrorZ+0x3>
     ba6:	ad 85       	ldd	r26, Y+13	; 0x0d
     ba8:	be 85       	ldd	r27, Y+14	; 0x0e
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	be 87       	std	Y+14, r27	; 0x0e
     bae:	ad 87       	std	Y+13, r26	; 0x0d
}

void calculate_IMU_error(void) {
	
	int c = 0;
	while (c < 200) {
     bb0:	ab 2b       	or	r26, r27
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <calculate_IMU_error+0x25a>
     bb4:	ed ce       	rjmp	.-550    	; 0x990 <calculate_IMU_error+0x34>
     bb6:	6d 83       	std	Y+5, r22	; 0x05
     bb8:	7e 83       	std	Y+6, r23	; 0x06
     bba:	8f 83       	std	Y+7, r24	; 0x07
     bbc:	98 87       	std	Y+8, r25	; 0x08
		GyroErrorZ = GyroErrorZ + Gyro_z;
		
		c++;
	}
	
	AccErrorX = AccErrorX / 200;
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	48 e4       	ldi	r20, 0x48	; 72
     bc4:	53 e4       	ldi	r21, 0x43	; 67
     bc6:	69 85       	ldd	r22, Y+9	; 0x09
     bc8:	7a 85       	ldd	r23, Y+10	; 0x0a
     bca:	8b 85       	ldd	r24, Y+11	; 0x0b
     bcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bce:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     bd2:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <AccErrorX>
     bd6:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <AccErrorX+0x1>
     bda:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <AccErrorX+0x2>
     bde:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <AccErrorX+0x3>
	AccErrorY = AccErrorY / 200;
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	48 e4       	ldi	r20, 0x48	; 72
     be8:	53 e4       	ldi	r21, 0x43	; 67
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     bf2:	60 93 af 00 	sts	0x00AF, r22	; 0x8000af <AccErrorY>
     bf6:	70 93 b0 00 	sts	0x00B0, r23	; 0x8000b0 <AccErrorY+0x1>
     bfa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <AccErrorY+0x2>
     bfe:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <AccErrorY+0x3>
	AccErrorZ = AccErrorZ / 200;
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	48 e4       	ldi	r20, 0x48	; 72
     c08:	53 e4       	ldi	r21, 0x43	; 67
     c0a:	c3 01       	movw	r24, r6
     c0c:	b2 01       	movw	r22, r4
     c0e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     c12:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <AccErrorZ>
     c16:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <AccErrorZ+0x1>
     c1a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <AccErrorZ+0x2>
     c1e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <AccErrorZ+0x3>

	GyroErrorX = GyroErrorX / 200;
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	48 e4       	ldi	r20, 0x48	; 72
     c28:	53 e4       	ldi	r21, 0x43	; 67
     c2a:	c5 01       	movw	r24, r10
     c2c:	b4 01       	movw	r22, r8
     c2e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     c32:	60 93 db 00 	sts	0x00DB, r22	; 0x8000db <GyroErrorX>
     c36:	70 93 dc 00 	sts	0x00DC, r23	; 0x8000dc <GyroErrorX+0x1>
     c3a:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <GyroErrorX+0x2>
     c3e:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <GyroErrorX+0x3>
	GyroErrorY = GyroErrorY / 200;
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	48 e4       	ldi	r20, 0x48	; 72
     c48:	53 e4       	ldi	r21, 0x43	; 67
     c4a:	69 81       	ldd	r22, Y+1	; 0x01
     c4c:	7a 81       	ldd	r23, Y+2	; 0x02
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     c56:	60 93 c3 00 	sts	0x00C3, r22	; 0x8000c3 <GyroErrorY>
     c5a:	70 93 c4 00 	sts	0x00C4, r23	; 0x8000c4 <GyroErrorY+0x1>
     c5e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <GyroErrorY+0x2>
     c62:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <GyroErrorY+0x3>
	GyroErrorZ = GyroErrorZ / 200;
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	48 e4       	ldi	r20, 0x48	; 72
     c6c:	53 e4       	ldi	r21, 0x43	; 67
     c6e:	6d 81       	ldd	r22, Y+5	; 0x05
     c70:	7e 81       	ldd	r23, Y+6	; 0x06
     c72:	8f 81       	ldd	r24, Y+7	; 0x07
     c74:	98 85       	ldd	r25, Y+8	; 0x08
     c76:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     c7a:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <GyroErrorZ>
     c7e:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <GyroErrorZ+0x1>
     c82:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <GyroErrorZ+0x2>
     c86:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <GyroErrorZ+0x3>
}
     c8a:	2e 96       	adiw	r28, 0x0e	; 14
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	9f 90       	pop	r9
     ca8:	8f 90       	pop	r8
     caa:	7f 90       	pop	r7
     cac:	6f 90       	pop	r6
     cae:	5f 90       	pop	r5
     cb0:	4f 90       	pop	r4
     cb2:	08 95       	ret

00000cb4 <timer_setup>:

void timer_setup(){
	TCCR1A = 0x00;
     cb4:	1f bc       	out	0x2f, r1	; 47
	TIMSK |= _BV(TOIE1);
     cb6:	89 b7       	in	r24, 0x39	; 57
     cb8:	84 60       	ori	r24, 0x04	; 4
     cba:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= _BV(CS11);
     cbc:	8e b5       	in	r24, 0x2e	; 46
     cbe:	82 60       	ori	r24, 0x02	; 2
     cc0:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(_BV(CS12)  | _BV(CS10)); // prescaler=8
     cc2:	8e b5       	in	r24, 0x2e	; 46
     cc4:	8a 7f       	andi	r24, 0xFA	; 250
     cc6:	8e bd       	out	0x2e, r24	; 46
     cc8:	08 95       	ret

00000cca <get_time_sec>:
}

void get_time_sec(double* dt){
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	7c 01       	movw	r14, r24
	uint8_t sreg = SREG;
     cde:	1f b7       	in	r17, 0x3f	; 63
	cli();
     ce0:	f8 94       	cli
	double cur = TCNT1;
     ce2:	cc b5       	in	r28, 0x2c	; 44
     ce4:	dd b5       	in	r29, 0x2d	; 45
	*dt = (5e-7) * cur + (0.032768) * count; // step time = (prescaler=8) * 1.0/(f_cpu=16m), count = (max timer value=0xffff)) * (step time)
     ce6:	2d eb       	ldi	r18, 0xBD	; 189
     ce8:	37 e3       	ldi	r19, 0x37	; 55
     cea:	46 e0       	ldi	r20, 0x06	; 6
     cec:	5d e3       	ldi	r21, 0x3D	; 61
     cee:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <count>
     cf2:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <count+0x1>
     cf6:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <count+0x2>
     cfa:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <count+0x3>
     cfe:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     d02:	4b 01       	movw	r8, r22
     d04:	5c 01       	movw	r10, r24
     d06:	be 01       	movw	r22, r28
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 87 0c 	call	0x190e	; 0x190e <__floatunsisf>
     d10:	2d eb       	ldi	r18, 0xBD	; 189
     d12:	37 e3       	ldi	r19, 0x37	; 55
     d14:	46 e0       	ldi	r20, 0x06	; 6
     d16:	55 e3       	ldi	r21, 0x35	; 53
     d18:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	c5 01       	movw	r24, r10
     d22:	b4 01       	movw	r22, r8
     d24:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     d28:	f7 01       	movw	r30, r14
     d2a:	60 83       	st	Z, r22
     d2c:	71 83       	std	Z+1, r23	; 0x01
     d2e:	82 83       	std	Z+2, r24	; 0x02
     d30:	93 83       	std	Z+3, r25	; 0x03
	count = TCNT1 = 0; // don't forget to reset tcnt1 also, because we used its value in out calculation.
     d32:	1d bc       	out	0x2d, r1	; 45
     d34:	1c bc       	out	0x2c, r1	; 44
     d36:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <count>
     d3a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <count+0x1>
     d3e:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <count+0x2>
     d42:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <count+0x3>
	SREG = sreg;
     d46:	1f bf       	out	0x3f, r17	; 63
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	9f 90       	pop	r9
     d58:	8f 90       	pop	r8
     d5a:	08 95       	ret

00000d5c <__vector_9>:

SIGNAL(TIMER1_OVF_vect){
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
	count += 1;
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e8       	ldi	r20, 0x80	; 128
     d84:	5f e3       	ldi	r21, 0x3F	; 63
     d86:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <count>
     d8a:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <count+0x1>
     d8e:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <count+0x2>
     d92:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <count+0x3>
     d96:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     d9a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <count>
     d9e:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <count+0x1>
     da2:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <count+0x2>
     da6:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <count+0x3>
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <ADC_Init>:

void ADC_Init()
 {
	ADCSRA = (1<<ADEN) | (1 << ADPS1) | (1 << ADPS2); /* Enable ADC , sampling freq=osc_freq/64 */
     dcc:	86 e8       	ldi	r24, 0x86	; 134
     dce:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1<<REFS0);                    /* Result right justified, select channel zero */
     dd0:	80 e4       	ldi	r24, 0x40	; 64
     dd2:	87 b9       	out	0x07, r24	; 7
     dd4:	08 95       	ret

00000dd6 <ADC_GetAdcValue>:
 }

uint16_t ADC_GetAdcValue(uint8_t v_adcChannel_u8)
 {
   
	ADMUX = (1<<REFS0) | v_adcChannel_u8;               /* Select the required channel */
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dda:	85 e3       	ldi	r24, 0x35	; 53
     ddc:	8a 95       	dec	r24
     dde:	f1 f7       	brne	.-4      	; 0xddc <ADC_GetAdcValue+0x6>
     de0:	00 00       	nop
	_delay_us(10);                         /* Wait for some time for the channel to get selected */
	ADCSRA |= 1 << ADSC;                   /* Start the ADC conversion by setting ADSC bit */
     de2:	36 9a       	sbi	0x06, 6	; 6
   
	while((ADCSRA & (1 << ADIF)) == 0);    /* Wait till the conversion is over */
     de4:	34 9b       	sbis	0x06, 4	; 6
     de6:	fe cf       	rjmp	.-4      	; 0xde4 <ADC_GetAdcValue+0xe>
                                           /* ADIF will be set once ADC conversion is complete */
	return(ADCW);                          /* Return the 10-bit result */
     de8:	84 b1       	in	r24, 0x04	; 4
     dea:	95 b1       	in	r25, 0x05	; 5
 }
     dec:	08 95       	ret

00000dee <main>:
 
int main()
{	
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	c6 55       	subi	r28, 0x56	; 86
     df8:	d1 09       	sbc	r29, r1
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
	
	DDRB |= (1<<PB0) | (1<<PB1);
     e04:	87 b3       	in	r24, 0x17	; 23
     e06:	83 60       	ori	r24, 0x03	; 3
     e08:	87 bb       	out	0x17, r24	; 23
	
	ADC_Init();
     e0a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ADC_Init>
	I2C_Init();
     e0e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <I2C_Init>
	USART_Init(115200);
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	72 ec       	ldi	r23, 0xC2	; 194
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 04 0b 	call	0x1608	; 0x1608 <USART_Init>

	PWM_Init();
     e1e:	0e 94 42 01 	call	0x284	; 0x284 <PWM_Init>
	PWM_SetDutyCycle(0);
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	cb 01       	movw	r24, r22
     e28:	0e 94 47 01 	call	0x28e	; 0x28e <PWM_SetDutyCycle>
	PWM_Start();
     e2c:	0e 94 94 01 	call	0x328	; 0x328 <PWM_Start>
	
	Gyro_Init();
     e30:	0e 94 99 01 	call	0x332	; 0x332 <Gyro_Init>
	timer_setup();
     e34:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <timer_setup>
	calculate_IMU_error();
     e38:	0e 94 ae 04 	call	0x95c	; 0x95c <calculate_IMU_error>
	
	char buffer[20], double_[10];	
	
	sei();
     e3c:	78 94       	sei
		
		Kp = (double) adc[1] * (10.0 / 1024.0);
		Ki = (double) adc[2] * (2.0 / 1024.0);
		Kd = (double) adc[3] * (0.3 / 1024.0);
		
		pitch += (double) 65 + adc[0] * (15.0 / 1024.0);
     e3e:	ce 01       	movw	r24, r28
     e40:	cf 96       	adiw	r24, 0x3f	; 63
     e42:	2c 01       	movw	r4, r24
		};
		
		int tmp_sz = sizeof(tmp) / sizeof(tmp[0]);
		
		for(int i = 0; i < tmp_sz; i++){
			dtostrf(tmp[i], 3, 3, double_);
     e44:	3e 01       	movw	r6, r28
     e46:	95 e1       	ldi	r25, 0x15	; 21
     e48:	69 0e       	add	r6, r25
     e4a:	71 1c       	adc	r7, r1
			sprintf(buffer, "%s/", double_);
     e4c:	de 01       	movw	r26, r28
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	1d 01       	movw	r2, r26
		};
		
		int tmp_sz = sizeof(tmp) / sizeof(tmp[0]);
		
		for(int i = 0; i < tmp_sz; i++){
			dtostrf(tmp[i], 3, 3, double_);
     e52:	64 96       	adiw	r28, 0x14	; 20
     e54:	6f ae       	std	Y+63, r6	; 0x3f
     e56:	64 97       	sbiw	r28, 0x14	; 20
     e58:	65 96       	adiw	r28, 0x15	; 21
     e5a:	7f ae       	std	Y+63, r7	; 0x3f
     e5c:	65 97       	sbiw	r28, 0x15	; 21
			sprintf(buffer, "%s/", double_);
     e5e:	66 96       	adiw	r28, 0x16	; 22
     e60:	af af       	std	Y+63, r26	; 0x3f
     e62:	66 97       	sbiw	r28, 0x16	; 22
     e64:	67 96       	adiw	r28, 0x17	; 23
     e66:	3f ae       	std	Y+63, r3	; 0x3f
     e68:	67 97       	sbiw	r28, 0x17	; 23
	
	sei();
	
	while(1)
	{
		Read_RawValue();
     e6a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Read_RawValue>
		get_time_sec(&dt);
     e6e:	87 ed       	ldi	r24, 0xD7	; 215
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 65 06 	call	0xcca	; 0xcca <get_time_sec>
		
		// Calculating Roll and Pitch from the accelerometer data
		accAngleX = (atan(Acc_y / sqrt(pow(Acc_x, 2) + pow(Acc_z, 2))) * RAD_TO_DEG) - AccErrorX;
     e76:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <Acc_y>
     e7a:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <Acc_y+0x1>
     e7e:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <Acc_y+0x2>
     e82:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <Acc_y+0x3>
     e86:	80 90 a3 00 	lds	r8, 0x00A3	; 0x8000a3 <Acc_x>
     e8a:	90 90 a4 00 	lds	r9, 0x00A4	; 0x8000a4 <Acc_x+0x1>
     e8e:	a0 90 a5 00 	lds	r10, 0x00A5	; 0x8000a5 <Acc_x+0x2>
     e92:	b0 90 a6 00 	lds	r11, 0x00A6	; 0x8000a6 <Acc_x+0x3>
     e96:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Acc_z>
     e9a:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Acc_z+0x1>
     e9e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Acc_z+0x2>
     ea2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <Acc_z+0x3>
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     eae:	2b 96       	adiw	r28, 0x0b	; 11
     eb0:	6c af       	std	Y+60, r22	; 0x3c
     eb2:	7d af       	std	Y+61, r23	; 0x3d
     eb4:	8e af       	std	Y+62, r24	; 0x3e
     eb6:	9f af       	std	Y+63, r25	; 0x3f
     eb8:	2b 97       	sbiw	r28, 0x0b	; 11
     eba:	a5 01       	movw	r20, r10
     ebc:	94 01       	movw	r18, r8
     ebe:	c5 01       	movw	r24, r10
     ec0:	b4 01       	movw	r22, r8
     ec2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     ec6:	2f 96       	adiw	r28, 0x0f	; 15
     ec8:	6c af       	std	Y+60, r22	; 0x3c
     eca:	7d af       	std	Y+61, r23	; 0x3d
     ecc:	8e af       	std	Y+62, r24	; 0x3e
     ece:	9f af       	std	Y+63, r25	; 0x3f
     ed0:	2f 97       	sbiw	r28, 0x0f	; 15
     ed2:	2b 96       	adiw	r28, 0x0b	; 11
     ed4:	2c ad       	ldd	r18, Y+60	; 0x3c
     ed6:	3d ad       	ldd	r19, Y+61	; 0x3d
     ed8:	4e ad       	ldd	r20, Y+62	; 0x3e
     eda:	5f ad       	ldd	r21, Y+63	; 0x3f
     edc:	2b 97       	sbiw	r28, 0x0b	; 11
     ede:	2f 96       	adiw	r28, 0x0f	; 15
     ee0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ee2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ee4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ee6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ee8:	2f 97       	sbiw	r28, 0x0f	; 15
     eea:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     eee:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <sqrt>
     ef2:	9b 01       	movw	r18, r22
     ef4:	ac 01       	movw	r20, r24
     ef6:	c7 01       	movw	r24, r14
     ef8:	b6 01       	movw	r22, r12
     efa:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     efe:	0e 94 b2 0b 	call	0x1764	; 0x1764 <atan>
     f02:	21 ee       	ldi	r18, 0xE1	; 225
     f04:	3e e2       	ldi	r19, 0x2E	; 46
     f06:	45 e6       	ldi	r20, 0x65	; 101
     f08:	52 e4       	ldi	r21, 0x42	; 66
     f0a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     f0e:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <AccErrorX>
     f12:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <AccErrorX+0x1>
     f16:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <AccErrorX+0x2>
     f1a:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <AccErrorX+0x3>
     f1e:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     f22:	2f 96       	adiw	r28, 0x0f	; 15
     f24:	6c af       	std	Y+60, r22	; 0x3c
     f26:	7d af       	std	Y+61, r23	; 0x3d
     f28:	8e af       	std	Y+62, r24	; 0x3e
     f2a:	9f af       	std	Y+63, r25	; 0x3f
     f2c:	2f 97       	sbiw	r28, 0x0f	; 15
     f2e:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <accAngleX>
     f32:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <accAngleX+0x1>
     f36:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <accAngleX+0x2>
     f3a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <accAngleX+0x3>
		accAngleY = (atan(-1 * Acc_x / sqrt(pow(Acc_y, 2) + pow(Acc_z, 2))) * RAD_TO_DEG) - AccErrorY;
     f3e:	a7 01       	movw	r20, r14
     f40:	96 01       	movw	r18, r12
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     f4a:	2b 96       	adiw	r28, 0x0b	; 11
     f4c:	2c ad       	ldd	r18, Y+60	; 0x3c
     f4e:	3d ad       	ldd	r19, Y+61	; 0x3d
     f50:	4e ad       	ldd	r20, Y+62	; 0x3e
     f52:	5f ad       	ldd	r21, Y+63	; 0x3f
     f54:	2b 97       	sbiw	r28, 0x0b	; 11
     f56:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
     f5a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <sqrt>
     f5e:	9b 01       	movw	r18, r22
     f60:	ac 01       	movw	r20, r24
     f62:	c5 01       	movw	r24, r10
     f64:	b4 01       	movw	r22, r8
     f66:	90 58       	subi	r25, 0x80	; 128
     f68:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
     f6c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <atan>
     f70:	21 ee       	ldi	r18, 0xE1	; 225
     f72:	3e e2       	ldi	r19, 0x2E	; 46
     f74:	45 e6       	ldi	r20, 0x65	; 101
     f76:	52 e4       	ldi	r21, 0x42	; 66
     f78:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
     f7c:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <AccErrorY>
     f80:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <AccErrorY+0x1>
     f84:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <AccErrorY+0x2>
     f88:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <AccErrorY+0x3>
     f8c:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     f90:	2b 96       	adiw	r28, 0x0b	; 11
     f92:	6c af       	std	Y+60, r22	; 0x3c
     f94:	7d af       	std	Y+61, r23	; 0x3d
     f96:	8e af       	std	Y+62, r24	; 0x3e
     f98:	9f af       	std	Y+63, r25	; 0x3f
     f9a:	2b 97       	sbiw	r28, 0x0b	; 11
     f9c:	60 93 9f 00 	sts	0x009F, r22	; 0x80009f <accAngleY>
     fa0:	70 93 a0 00 	sts	0x00A0, r23	; 0x8000a0 <accAngleY+0x1>
     fa4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <accAngleY+0x2>
     fa8:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <accAngleY+0x3>
		
		// Correct the outputs with the calculated error values
		Gyro_x = Gyro_x - GyroErrorX;
     fac:	20 91 db 00 	lds	r18, 0x00DB	; 0x8000db <GyroErrorX>
     fb0:	30 91 dc 00 	lds	r19, 0x00DC	; 0x8000dc <GyroErrorX+0x1>
     fb4:	40 91 dd 00 	lds	r20, 0x00DD	; 0x8000dd <GyroErrorX+0x2>
     fb8:	50 91 de 00 	lds	r21, 0x00DE	; 0x8000de <GyroErrorX+0x3>
     fbc:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <Gyro_x>
     fc0:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <Gyro_x+0x1>
     fc4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Gyro_x+0x2>
     fc8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Gyro_x+0x3>
     fcc:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
     fd0:	6b 01       	movw	r12, r22
     fd2:	7c 01       	movw	r14, r24
     fd4:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <Gyro_x>
     fd8:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <Gyro_x+0x1>
     fdc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Gyro_x+0x2>
     fe0:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <Gyro_x+0x3>
		Gyro_y = Gyro_y - GyroErrorY;
     fe4:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <GyroErrorY>
     fe8:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <GyroErrorY+0x1>
     fec:	40 91 c5 00 	lds	r20, 0x00C5	; 0x8000c5 <GyroErrorY+0x2>
     ff0:	50 91 c6 00 	lds	r21, 0x00C6	; 0x8000c6 <GyroErrorY+0x3>
     ff4:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <Gyro_y>
     ff8:	70 91 cc 00 	lds	r23, 0x00CC	; 0x8000cc <Gyro_y+0x1>
     ffc:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <Gyro_y+0x2>
    1000:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <Gyro_y+0x3>
    1004:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
    1008:	60 93 cb 00 	sts	0x00CB, r22	; 0x8000cb <Gyro_y>
    100c:	70 93 cc 00 	sts	0x00CC, r23	; 0x8000cc <Gyro_y+0x1>
    1010:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <Gyro_y+0x2>
    1014:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <Gyro_y+0x3>
		
		// Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
		gyroAngleX = gyroAngleX + Gyro_x * dt; // deg/s * s = deg
    1018:	80 90 d7 00 	lds	r8, 0x00D7	; 0x8000d7 <dt>
    101c:	90 90 d8 00 	lds	r9, 0x00D8	; 0x8000d8 <dt+0x1>
    1020:	a0 90 d9 00 	lds	r10, 0x00D9	; 0x8000d9 <dt+0x2>
    1024:	b0 90 da 00 	lds	r11, 0x00DA	; 0x8000da <dt+0x3>
		gyroAngleY = gyroAngleY + Gyro_y * dt;
    1028:	a5 01       	movw	r20, r10
    102a:	94 01       	movw	r18, r8
    102c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    1030:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <gyroAngleY>
    1034:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <gyroAngleY+0x1>
    1038:	40 91 e5 00 	lds	r20, 0x00E5	; 0x8000e5 <gyroAngleY+0x2>
    103c:	50 91 e6 00 	lds	r21, 0x00E6	; 0x8000e6 <gyroAngleY+0x3>
    1040:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    1044:	63 96       	adiw	r28, 0x13	; 19
    1046:	6c af       	std	Y+60, r22	; 0x3c
    1048:	7d af       	std	Y+61, r23	; 0x3d
    104a:	8e af       	std	Y+62, r24	; 0x3e
    104c:	9f af       	std	Y+63, r25	; 0x3f
    104e:	63 97       	sbiw	r28, 0x13	; 19
		
		// Complementary filter - combine acceleromter and gyro angle values
		gyroAngleX = 0.96 * gyroAngleX + 0.04 * accAngleX;
    1050:	a5 01       	movw	r20, r10
    1052:	94 01       	movw	r18, r8
    1054:	c7 01       	movw	r24, r14
    1056:	b6 01       	movw	r22, r12
    1058:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    105c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <gyroAngleX>
    1060:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <gyroAngleX+0x1>
    1064:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <gyroAngleX+0x2>
    1068:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <gyroAngleX+0x3>
    106c:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    1070:	2f e8       	ldi	r18, 0x8F	; 143
    1072:	32 ec       	ldi	r19, 0xC2	; 194
    1074:	45 e7       	ldi	r20, 0x75	; 117
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    107c:	6b 01       	movw	r12, r22
    107e:	7c 01       	movw	r14, r24
    1080:	2a e0       	ldi	r18, 0x0A	; 10
    1082:	37 ed       	ldi	r19, 0xD7	; 215
    1084:	43 e2       	ldi	r20, 0x23	; 35
    1086:	5d e3       	ldi	r21, 0x3D	; 61
    1088:	2f 96       	adiw	r28, 0x0f	; 15
    108a:	6c ad       	ldd	r22, Y+60	; 0x3c
    108c:	7d ad       	ldd	r23, Y+61	; 0x3d
    108e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1090:	9f ad       	ldd	r25, Y+63	; 0x3f
    1092:	2f 97       	sbiw	r28, 0x0f	; 15
    1094:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    10a4:	6b 01       	movw	r12, r22
    10a6:	7c 01       	movw	r14, r24
    10a8:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <gyroAngleX>
    10ac:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <gyroAngleX+0x1>
    10b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gyroAngleX+0x2>
    10b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <gyroAngleX+0x3>
		gyroAngleY = 0.96 * gyroAngleY + 0.04 * accAngleY;
    10b8:	2f e8       	ldi	r18, 0x8F	; 143
    10ba:	32 ec       	ldi	r19, 0xC2	; 194
    10bc:	45 e7       	ldi	r20, 0x75	; 117
    10be:	5f e3       	ldi	r21, 0x3F	; 63
    10c0:	63 96       	adiw	r28, 0x13	; 19
    10c2:	6c ad       	ldd	r22, Y+60	; 0x3c
    10c4:	7d ad       	ldd	r23, Y+61	; 0x3d
    10c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    10c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    10ca:	63 97       	sbiw	r28, 0x13	; 19
    10cc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    10d0:	4b 01       	movw	r8, r22
    10d2:	5c 01       	movw	r10, r24
    10d4:	2a e0       	ldi	r18, 0x0A	; 10
    10d6:	37 ed       	ldi	r19, 0xD7	; 215
    10d8:	43 e2       	ldi	r20, 0x23	; 35
    10da:	5d e3       	ldi	r21, 0x3D	; 61
    10dc:	2b 96       	adiw	r28, 0x0b	; 11
    10de:	6c ad       	ldd	r22, Y+60	; 0x3c
    10e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    10e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    10e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    10e6:	2b 97       	sbiw	r28, 0x0b	; 11
    10e8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    10ec:	9b 01       	movw	r18, r22
    10ee:	ac 01       	movw	r20, r24
    10f0:	c5 01       	movw	r24, r10
    10f2:	b4 01       	movw	r22, r8
    10f4:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    10f8:	60 93 e3 00 	sts	0x00E3, r22	; 0x8000e3 <gyroAngleY>
    10fc:	70 93 e4 00 	sts	0x00E4, r23	; 0x8000e4 <gyroAngleY+0x1>
    1100:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <gyroAngleY+0x2>
    1104:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <gyroAngleY+0x3>
		
		roll = gyroAngleX;
    1108:	c0 92 d3 00 	sts	0x00D3, r12	; 0x8000d3 <roll>
    110c:	d0 92 d4 00 	sts	0x00D4, r13	; 0x8000d4 <roll+0x1>
    1110:	e0 92 d5 00 	sts	0x00D5, r14	; 0x8000d5 <roll+0x2>
    1114:	f0 92 d6 00 	sts	0x00D6, r15	; 0x8000d6 <roll+0x3>
		pitch = gyroAngleY;
    1118:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <pitch>
    111c:	70 93 d0 00 	sts	0x00D0, r23	; 0x8000d0 <pitch+0x1>
    1120:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <pitch+0x2>
    1124:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <pitch+0x3>
    1128:	7e 01       	movw	r14, r28
    112a:	bf e3       	ldi	r27, 0x3F	; 63
    112c:	eb 0e       	add	r14, r27
    112e:	f1 1c       	adc	r15, r1
    1130:	10 e0       	ldi	r17, 0x00	; 0
		
		uint16_t adc[4];
		for(int i = 0; i < 4; i++){
			adc[i] = ADC_GetAdcValue(i);
    1132:	81 2f       	mov	r24, r17
    1134:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <ADC_GetAdcValue>
    1138:	f7 01       	movw	r30, r14
    113a:	81 93       	st	Z+, r24
    113c:	91 93       	st	Z+, r25
    113e:	7f 01       	movw	r14, r30
    1140:	1f 5f       	subi	r17, 0xFF	; 255
		
		roll = gyroAngleX;
		pitch = gyroAngleY;
		
		uint16_t adc[4];
		for(int i = 0; i < 4; i++){
    1142:	14 30       	cpi	r17, 0x04	; 4
    1144:	b1 f7       	brne	.-20     	; 0x1132 <main+0x344>
			adc[i] = ADC_GetAdcValue(i);
		}
		
		Kp = (double) adc[1] * (10.0 / 1024.0);
    1146:	23 96       	adiw	r28, 0x03	; 3
    1148:	6e ad       	ldd	r22, Y+62	; 0x3e
    114a:	7f ad       	ldd	r23, Y+63	; 0x3f
    114c:	23 97       	sbiw	r28, 0x03	; 3
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 87 0c 	call	0x190e	; 0x190e <__floatunsisf>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	5c e3       	ldi	r21, 0x3C	; 60
    115e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    1162:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <Kp>
    1166:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <Kp+0x1>
    116a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <Kp+0x2>
    116e:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <Kp+0x3>
		Ki = (double) adc[2] * (2.0 / 1024.0);
    1172:	25 96       	adiw	r28, 0x05	; 5
    1174:	6e ad       	ldd	r22, Y+62	; 0x3e
    1176:	7f ad       	ldd	r23, Y+63	; 0x3f
    1178:	25 97       	sbiw	r28, 0x05	; 5
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 87 0c 	call	0x190e	; 0x190e <__floatunsisf>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	5b e3       	ldi	r21, 0x3B	; 59
    118a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    118e:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <Ki>
    1192:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <Ki+0x1>
    1196:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Ki+0x2>
    119a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <Ki+0x3>
		Kd = (double) adc[3] * (0.3 / 1024.0);
    119e:	27 96       	adiw	r28, 0x07	; 7
    11a0:	6e ad       	ldd	r22, Y+62	; 0x3e
    11a2:	7f ad       	ldd	r23, Y+63	; 0x3f
    11a4:	27 97       	sbiw	r28, 0x07	; 7
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 87 0c 	call	0x190e	; 0x190e <__floatunsisf>
    11ae:	2a e9       	ldi	r18, 0x9A	; 154
    11b0:	39 e9       	ldi	r19, 0x99	; 153
    11b2:	49 e9       	ldi	r20, 0x99	; 153
    11b4:	59 e3       	ldi	r21, 0x39	; 57
    11b6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    11ba:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <Kd>
    11be:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <Kd+0x1>
    11c2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <Kd+0x2>
    11c6:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <Kd+0x3>
		
		pitch += (double) 65 + adc[0] * (15.0 / 1024.0);
    11ca:	d2 01       	movw	r26, r4
    11cc:	6d 91       	ld	r22, X+
    11ce:	7c 91       	ld	r23, X
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 87 0c 	call	0x190e	; 0x190e <__floatunsisf>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e7       	ldi	r20, 0x70	; 112
    11de:	5c e3       	ldi	r21, 0x3C	; 60
    11e0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	42 e8       	ldi	r20, 0x82	; 130
    11ea:	52 e4       	ldi	r21, 0x42	; 66
    11ec:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    11f0:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <pitch>
    11f4:	30 91 d0 00 	lds	r19, 0x00D0	; 0x8000d0 <pitch+0x1>
    11f8:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <pitch+0x2>
    11fc:	50 91 d2 00 	lds	r21, 0x00D2	; 0x8000d2 <pitch+0x3>
    1200:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    1204:	6b 01       	movw	r12, r22
    1206:	7c 01       	movw	r14, r24
    1208:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <pitch>
    120c:	70 93 d0 00 	sts	0x00D0, r23	; 0x8000d0 <pitch+0x1>
    1210:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <pitch+0x2>
    1214:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <pitch+0x3>
		
		error = pitch - target;
    1218:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
    121c:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
    1220:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <__data_end+0x2>
    1224:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <__data_end+0x3>
    1228:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
    122c:	4b 01       	movw	r8, r22
    122e:	5c 01       	movw	r10, r24
    1230:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <error>
    1234:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <error+0x1>
    1238:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <error+0x2>
    123c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <error+0x3>
		
		go_flag |= (-10 < error) && (error < 10);
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e2       	ldi	r20, 0x20	; 32
    1246:	51 ec       	ldi	r21, 0xC1	; 193
    1248:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__gesf2>
    124c:	18 16       	cp	r1, r24
    124e:	74 f4       	brge	.+28     	; 0x126c <main+0x47e>
    1250:	11 e0       	ldi	r17, 0x01	; 1
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	c5 01       	movw	r24, r10
    125c:	b4 01       	movw	r22, r8
    125e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__cmpsf2>
    1262:	88 23       	and	r24, r24
    1264:	0c f0       	brlt	.+2      	; 0x1268 <main+0x47a>
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	81 2f       	mov	r24, r17
    126a:	01 c0       	rjmp	.+2      	; 0x126e <main+0x480>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <go_flag>
    1272:	89 2b       	or	r24, r25
    1274:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <go_flag>
		
		if(!go_flag || (pitch > 50) || (pitch < -50) || (roll > 50) || (roll < -50)){
    1278:	88 23       	and	r24, r24
    127a:	81 f1       	breq	.+96     	; 0x12dc <main+0x4ee>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	48 e4       	ldi	r20, 0x48	; 72
    1282:	52 e4       	ldi	r21, 0x42	; 66
    1284:	c7 01       	movw	r24, r14
    1286:	b6 01       	movw	r22, r12
    1288:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__gesf2>
    128c:	18 16       	cp	r1, r24
    128e:	34 f1       	brlt	.+76     	; 0x12dc <main+0x4ee>
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	48 e4       	ldi	r20, 0x48	; 72
    1296:	52 ec       	ldi	r21, 0xC2	; 194
    1298:	c7 01       	movw	r24, r14
    129a:	b6 01       	movw	r22, r12
    129c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__cmpsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	e4 f0       	brlt	.+56     	; 0x12dc <main+0x4ee>
    12a4:	c0 90 d3 00 	lds	r12, 0x00D3	; 0x8000d3 <roll>
    12a8:	d0 90 d4 00 	lds	r13, 0x00D4	; 0x8000d4 <roll+0x1>
    12ac:	e0 90 d5 00 	lds	r14, 0x00D5	; 0x8000d5 <roll+0x2>
    12b0:	f0 90 d6 00 	lds	r15, 0x00D6	; 0x8000d6 <roll+0x3>
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	48 e4       	ldi	r20, 0x48	; 72
    12ba:	52 e4       	ldi	r21, 0x42	; 66
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 01       	movw	r22, r12
    12c0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__gesf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	54 f0       	brlt	.+20     	; 0x12dc <main+0x4ee>
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	48 e4       	ldi	r20, 0x48	; 72
    12ce:	52 ec       	ldi	r21, 0xC2	; 194
    12d0:	c7 01       	movw	r24, r14
    12d2:	b6 01       	movw	r22, r12
    12d4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__cmpsf2>
    12d8:	88 23       	and	r24, r24
    12da:	44 f4       	brge	.+16     	; 0x12ec <main+0x4fe>
			PWM_SetDutyCycle(0);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	cb 01       	movw	r24, r22
    12e2:	0e 94 47 01 	call	0x28e	; 0x28e <PWM_SetDutyCycle>
			PORTB |= (1<<1);
    12e6:	c1 9a       	sbi	0x18, 1	; 24
			PORTB &= ~(1<<0);
    12e8:	c0 98       	cbi	0x18, 0	; 24
    12ea:	f6 c0       	rjmp	.+492    	; 0x14d8 <main+0x6ea>
		}
		else{
			
			PORTB |= (1<<0);
    12ec:	c0 9a       	sbi	0x18, 0	; 24
			PORTB &= ~(1<<1);
    12ee:	c1 98       	cbi	0x18, 1	; 24
				
			sum_error += error * dt;
    12f0:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <error>
    12f4:	90 90 c0 00 	lds	r9, 0x00C0	; 0x8000c0 <error+0x1>
    12f8:	a0 90 c1 00 	lds	r10, 0x00C1	; 0x8000c1 <error+0x2>
    12fc:	b0 90 c2 00 	lds	r11, 0x00C2	; 0x8000c2 <error+0x3>
    1300:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <dt>
    1304:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <dt+0x1>
    1308:	a0 91 d9 00 	lds	r26, 0x00D9	; 0x8000d9 <dt+0x2>
    130c:	b0 91 da 00 	lds	r27, 0x00DA	; 0x8000da <dt+0x3>
    1310:	2b 96       	adiw	r28, 0x0b	; 11
    1312:	8c af       	std	Y+60, r24	; 0x3c
    1314:	9d af       	std	Y+61, r25	; 0x3d
    1316:	ae af       	std	Y+62, r26	; 0x3e
    1318:	bf af       	std	Y+63, r27	; 0x3f
    131a:	2b 97       	sbiw	r28, 0x0b	; 11
    131c:	9c 01       	movw	r18, r24
    131e:	ad 01       	movw	r20, r26
    1320:	c5 01       	movw	r24, r10
    1322:	b4 01       	movw	r22, r8
    1324:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    1328:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <sum_error>
    132c:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <sum_error+0x1>
    1330:	40 91 98 00 	lds	r20, 0x0098	; 0x800098 <sum_error+0x2>
    1334:	50 91 99 00 	lds	r21, 0x0099	; 0x800099 <sum_error+0x3>
    1338:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
    1340:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <sum_error>
    1344:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <sum_error+0x1>
    1348:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <sum_error+0x2>
    134c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <sum_error+0x3>
			
			double mx_val = 300;
			if(sum_error > mx_val)
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	46 e9       	ldi	r20, 0x96	; 150
    1356:	53 e4       	ldi	r21, 0x43	; 67
    1358:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__gesf2>
    135c:	18 16       	cp	r1, r24
    135e:	6c f4       	brge	.+26     	; 0x137a <main+0x58c>
				sum_error = mx_val;
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a6 e9       	ldi	r26, 0x96	; 150
    1366:	b3 e4       	ldi	r27, 0x43	; 67
    1368:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sum_error>
    136c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <sum_error+0x1>
    1370:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <sum_error+0x2>
    1374:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <sum_error+0x3>
    1378:	16 c0       	rjmp	.+44     	; 0x13a6 <main+0x5b8>
			if(sum_error < -mx_val)
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	46 e9       	ldi	r20, 0x96	; 150
    1380:	53 ec       	ldi	r21, 0xC3	; 195
    1382:	c7 01       	movw	r24, r14
    1384:	b6 01       	movw	r22, r12
    1386:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__cmpsf2>
    138a:	88 23       	and	r24, r24
    138c:	64 f4       	brge	.+24     	; 0x13a6 <main+0x5b8>
				sum_error = -mx_val;
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a6 e9       	ldi	r26, 0x96	; 150
    1394:	b3 ec       	ldi	r27, 0xC3	; 195
    1396:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <sum_error>
    139a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <sum_error+0x1>
    139e:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <sum_error+0x2>
    13a2:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <sum_error+0x3>
			
			motor_power = Kp * error + Ki * sum_error + Kd * (error - pre_error) / dt;
    13a6:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <sum_error>
    13aa:	30 91 97 00 	lds	r19, 0x0097	; 0x800097 <sum_error+0x1>
    13ae:	40 91 98 00 	lds	r20, 0x0098	; 0x800098 <sum_error+0x2>
    13b2:	50 91 99 00 	lds	r21, 0x0099	; 0x800099 <sum_error+0x3>
    13b6:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <Ki>
    13ba:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <Ki+0x1>
    13be:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <Ki+0x2>
    13c2:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <Ki+0x3>
    13c6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    13ca:	6b 01       	movw	r12, r22
    13cc:	7c 01       	movw	r14, r24
    13ce:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <Kp>
    13d2:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <Kp+0x1>
    13d6:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <Kp+0x2>
    13da:	50 91 ca 00 	lds	r21, 0x00CA	; 0x8000ca <Kp+0x3>
    13de:	c5 01       	movw	r24, r10
    13e0:	b4 01       	movw	r22, r8
    13e2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	c7 01       	movw	r24, r14
    13ec:	b6 01       	movw	r22, r12
    13ee:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    13f2:	6b 01       	movw	r12, r22
    13f4:	7c 01       	movw	r14, r24
    13f6:	20 91 a7 00 	lds	r18, 0x00A7	; 0x8000a7 <pre_error>
    13fa:	30 91 a8 00 	lds	r19, 0x00A8	; 0x8000a8 <pre_error+0x1>
    13fe:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <pre_error+0x2>
    1402:	50 91 aa 00 	lds	r21, 0x00AA	; 0x8000aa <pre_error+0x3>
    1406:	c5 01       	movw	r24, r10
    1408:	b4 01       	movw	r22, r8
    140a:	0e 94 45 0b 	call	0x168a	; 0x168a <__subsf3>
    140e:	20 91 b3 00 	lds	r18, 0x00B3	; 0x8000b3 <Kd>
    1412:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <Kd+0x1>
    1416:	40 91 b5 00 	lds	r20, 0x00B5	; 0x8000b5 <Kd+0x2>
    141a:	50 91 b6 00 	lds	r21, 0x00B6	; 0x8000b6 <Kd+0x3>
    141e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__mulsf3>
    1422:	2b 96       	adiw	r28, 0x0b	; 11
    1424:	2c ad       	ldd	r18, Y+60	; 0x3c
    1426:	3d ad       	ldd	r19, Y+61	; 0x3d
    1428:	4e ad       	ldd	r20, Y+62	; 0x3e
    142a:	5f ad       	ldd	r21, Y+63	; 0x3f
    142c:	2b 97       	sbiw	r28, 0x0b	; 11
    142e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__divsf3>
    1432:	9b 01       	movw	r18, r22
    1434:	ac 01       	movw	r20, r24
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    143e:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <motor_power>
    1442:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <motor_power+0x1>
    1446:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <motor_power+0x2>
    144a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <motor_power+0x3>

			pre_error = error;
    144e:	80 92 a7 00 	sts	0x00A7, r8	; 0x8000a7 <pre_error>
    1452:	90 92 a8 00 	sts	0x00A8, r9	; 0x8000a8 <pre_error+0x1>
    1456:	a0 92 a9 00 	sts	0x00A9, r10	; 0x8000a9 <pre_error+0x2>
    145a:	b0 92 aa 00 	sts	0x00AA, r11	; 0x8000aa <pre_error+0x3>
			
			if(motor_power > 0){
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__gesf2>
    1468:	18 16       	cp	r1, r24
    146a:	9c f4       	brge	.+38     	; 0x1492 <main+0x6a4>
				PORTD |= 1 << 5;
    146c:	95 9a       	sbi	0x12, 5	; 18
				PORTD &= ~(1 << 6);
    146e:	96 98       	cbi	0x12, 6	; 18
				duty_cycle = +motor_power;
    1470:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <motor_power>
    1474:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <motor_power+0x1>
    1478:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <motor_power+0x2>
    147c:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <motor_power+0x3>
    1480:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <duty_cycle>
    1484:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <duty_cycle+0x1>
    1488:	a0 93 e1 00 	sts	0x00E1, r26	; 0x8000e1 <duty_cycle+0x2>
    148c:	b0 93 e2 00 	sts	0x00E2, r27	; 0x8000e2 <duty_cycle+0x3>
    1490:	13 c0       	rjmp	.+38     	; 0x14b8 <main+0x6ca>
			}
			else{
				PORTD &= ~(1 << 5);
    1492:	95 98       	cbi	0x12, 5	; 18
				PORTD |= 1 << 6;
    1494:	96 9a       	sbi	0x12, 6	; 18
				duty_cycle = -motor_power;
    1496:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <motor_power>
    149a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <motor_power+0x1>
    149e:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <motor_power+0x2>
    14a2:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <motor_power+0x3>
    14a6:	b0 58       	subi	r27, 0x80	; 128
    14a8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <duty_cycle>
    14ac:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <duty_cycle+0x1>
    14b0:	a0 93 e1 00 	sts	0x00E1, r26	; 0x8000e1 <duty_cycle+0x2>
    14b4:	b0 93 e2 00 	sts	0x00E2, r27	; 0x8000e2 <duty_cycle+0x3>
			}
			
			PWM_SetDutyCycle(duty_cycle + 10);
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e2       	ldi	r20, 0x20	; 32
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	60 91 df 00 	lds	r22, 0x00DF	; 0x8000df <duty_cycle>
    14c4:	70 91 e0 00 	lds	r23, 0x00E0	; 0x8000e0 <duty_cycle+0x1>
    14c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <duty_cycle+0x2>
    14cc:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <duty_cycle+0x3>
    14d0:	0e 94 46 0b 	call	0x168c	; 0x168c <__addsf3>
    14d4:	0e 94 47 01 	call	0x28e	; 0x28e <PWM_SetDutyCycle>
		}
		
		//............................................................................//
		
		double tmp[] = {
    14d8:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <pitch>
    14dc:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <pitch+0x1>
    14e0:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <pitch+0x2>
    14e4:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <pitch+0x3>
    14e8:	8f 8f       	std	Y+31, r24	; 0x1f
    14ea:	98 a3       	std	Y+32, r25	; 0x20
    14ec:	a9 a3       	std	Y+33, r26	; 0x21
    14ee:	ba a3       	std	Y+34, r27	; 0x22
    14f0:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <Kp>
    14f4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <Kp+0x1>
    14f8:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <Kp+0x2>
    14fc:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <Kp+0x3>
    1500:	8b a3       	std	Y+35, r24	; 0x23
    1502:	9c a3       	std	Y+36, r25	; 0x24
    1504:	ad a3       	std	Y+37, r26	; 0x25
    1506:	be a3       	std	Y+38, r27	; 0x26
    1508:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Ki>
    150c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Ki+0x1>
    1510:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <Ki+0x2>
    1514:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <Ki+0x3>
    1518:	8f a3       	std	Y+39, r24	; 0x27
    151a:	98 a7       	std	Y+40, r25	; 0x28
    151c:	a9 a7       	std	Y+41, r26	; 0x29
    151e:	ba a7       	std	Y+42, r27	; 0x2a
    1520:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <Kd>
    1524:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <Kd+0x1>
    1528:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <Kd+0x2>
    152c:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <Kd+0x3>
    1530:	8b a7       	std	Y+43, r24	; 0x2b
    1532:	9c a7       	std	Y+44, r25	; 0x2c
    1534:	ad a7       	std	Y+45, r26	; 0x2d
    1536:	be a7       	std	Y+46, r27	; 0x2e
    1538:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <sum_error>
    153c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <sum_error+0x1>
    1540:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <sum_error+0x2>
    1544:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <sum_error+0x3>
    1548:	8f a7       	std	Y+47, r24	; 0x2f
    154a:	98 ab       	std	Y+48, r25	; 0x30
    154c:	a9 ab       	std	Y+49, r26	; 0x31
    154e:	ba ab       	std	Y+50, r27	; 0x32
    1550:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <motor_power>
    1554:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <motor_power+0x1>
    1558:	a0 91 70 00 	lds	r26, 0x0070	; 0x800070 <motor_power+0x2>
    155c:	b0 91 71 00 	lds	r27, 0x0071	; 0x800071 <motor_power+0x3>
    1560:	8b ab       	std	Y+51, r24	; 0x33
    1562:	9c ab       	std	Y+52, r25	; 0x34
    1564:	ad ab       	std	Y+53, r26	; 0x35
    1566:	be ab       	std	Y+54, r27	; 0x36
    1568:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <duty_cycle>
    156c:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <duty_cycle+0x1>
    1570:	a0 91 e1 00 	lds	r26, 0x00E1	; 0x8000e1 <duty_cycle+0x2>
    1574:	b0 91 e2 00 	lds	r27, 0x00E2	; 0x8000e2 <duty_cycle+0x3>
    1578:	8f ab       	std	Y+55, r24	; 0x37
    157a:	98 af       	std	Y+56, r25	; 0x38
    157c:	a9 af       	std	Y+57, r26	; 0x39
    157e:	ba af       	std	Y+58, r27	; 0x3a
    1580:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <dt>
    1584:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <dt+0x1>
    1588:	a0 91 d9 00 	lds	r26, 0x00D9	; 0x8000d9 <dt+0x2>
    158c:	b0 91 da 00 	lds	r27, 0x00DA	; 0x8000da <dt+0x3>
    1590:	8b af       	std	Y+59, r24	; 0x3b
    1592:	9c af       	std	Y+60, r25	; 0x3c
    1594:	ad af       	std	Y+61, r26	; 0x3d
    1596:	be af       	std	Y+62, r27	; 0x3e
    1598:	7e 01       	movw	r14, r28
    159a:	9f e1       	ldi	r25, 0x1F	; 31
    159c:	e9 0e       	add	r14, r25
    159e:	f1 1c       	adc	r15, r1
    15a0:	64 96       	adiw	r28, 0x14	; 20
    15a2:	df ac       	ldd	r13, Y+63	; 0x3f
    15a4:	64 97       	sbiw	r28, 0x14	; 20
    15a6:	65 96       	adiw	r28, 0x15	; 21
    15a8:	cf ac       	ldd	r12, Y+63	; 0x3f
    15aa:	65 97       	sbiw	r28, 0x15	; 21
    15ac:	66 96       	adiw	r28, 0x16	; 22
    15ae:	bf ac       	ldd	r11, Y+63	; 0x3f
    15b0:	66 97       	sbiw	r28, 0x16	; 22
    15b2:	67 96       	adiw	r28, 0x17	; 23
    15b4:	af ac       	ldd	r10, Y+63	; 0x3f
    15b6:	67 97       	sbiw	r28, 0x17	; 23
		};
		
		int tmp_sz = sizeof(tmp) / sizeof(tmp[0]);
		
		for(int i = 0; i < tmp_sz; i++){
			dtostrf(tmp[i], 3, 3, double_);
    15b8:	d7 01       	movw	r26, r14
    15ba:	6d 91       	ld	r22, X+
    15bc:	7d 91       	ld	r23, X+
    15be:	8d 91       	ld	r24, X+
    15c0:	9d 91       	ld	r25, X+
    15c2:	7d 01       	movw	r14, r26
    15c4:	0d 2d       	mov	r16, r13
    15c6:	1c 2d       	mov	r17, r12
    15c8:	23 e0       	ldi	r18, 0x03	; 3
    15ca:	43 e0       	ldi	r20, 0x03	; 3
    15cc:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <dtostrf>
			sprintf(buffer, "%s/", double_);
    15d0:	7f 92       	push	r7
    15d2:	6f 92       	push	r6
    15d4:	e0 e6       	ldi	r30, 0x60	; 96
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	ff 93       	push	r31
    15da:	ef 93       	push	r30
    15dc:	3f 92       	push	r3
    15de:	2f 92       	push	r2
    15e0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <sprintf>
			USART_SendString(buffer);
    15e4:	8b 2d       	mov	r24, r11
    15e6:	9a 2d       	mov	r25, r10
    15e8:	0e 94 36 0b 	call	0x166c	; 0x166c <USART_SendString>
			dt
		};
		
		int tmp_sz = sizeof(tmp) / sizeof(tmp[0]);
		
		for(int i = 0; i < tmp_sz; i++){
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	4e 14       	cp	r4, r14
    15fa:	5f 04       	cpc	r5, r15
    15fc:	e9 f6       	brne	.-70     	; 0x15b8 <main+0x7ca>
			dtostrf(tmp[i], 3, 3, double_);
			sprintf(buffer, "%s/", double_);
			USART_SendString(buffer);
		}
		USART_SendString("\n");
    15fe:	84 e6       	ldi	r24, 0x64	; 100
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 36 0b 	call	0x166c	; 0x166c <USART_SendString>
	}
    1606:	31 cc       	rjmp	.-1950   	; 0xe6a <main+0x7c>

00001608 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */ 
}
    1608:	2a b1       	in	r18, 0x0a	; 10
    160a:	28 61       	ori	r18, 0x18	; 24
    160c:	2a b9       	out	0x0a, r18	; 10
    160e:	20 b5       	in	r18, 0x20	; 32
    1610:	26 68       	ori	r18, 0x86	; 134
    1612:	20 bd       	out	0x20, r18	; 32
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	aa 1f       	adc	r26, r26
    161e:	bb 1f       	adc	r27, r27
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	9c 01       	movw	r18, r24
    162a:	ad 01       	movw	r20, r26
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	44 1f       	adc	r20, r20
    1632:	55 1f       	adc	r21, r21
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	44 1f       	adc	r20, r20
    163a:	55 1f       	adc	r21, r21
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	74 e2       	ldi	r23, 0x24	; 36
    1640:	84 ef       	ldi	r24, 0xF4	; 244
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__udivmodsi4>
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	82 0f       	add	r24, r18
    164c:	89 b9       	out	0x09, r24	; 9
    164e:	da 01       	movw	r26, r20
    1650:	c9 01       	movw	r24, r18
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	a1 09       	sbc	r26, r1
    1656:	b1 09       	sbc	r27, r1
    1658:	89 2f       	mov	r24, r25
    165a:	9a 2f       	mov	r25, r26
    165c:	ab 2f       	mov	r26, r27
    165e:	bb 27       	eor	r27, r27
    1660:	80 bd       	out	0x20, r24	; 32
    1662:	08 95       	ret

00001664 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
    1664:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
    1666:	5d 9b       	sbis	0x0b, 5	; 11
    1668:	fe cf       	rjmp	.-4      	; 0x1666 <USART_TxChar+0x2>
}
    166a:	08 95       	ret

0000166c <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
    1672:	88 81       	ld	r24, Y
    1674:	88 23       	and	r24, r24
    1676:	31 f0       	breq	.+12     	; 0x1684 <USART_SendString+0x18>
    1678:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
    167a:	0e 94 32 0b 	call	0x1664	; 0x1664 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
    167e:	89 91       	ld	r24, Y+
    1680:	81 11       	cpse	r24, r1
    1682:	fb cf       	rjmp	.-10     	; 0x167a <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	08 95       	ret

0000168a <__subsf3>:
    168a:	50 58       	subi	r21, 0x80	; 128

0000168c <__addsf3>:
    168c:	bb 27       	eor	r27, r27
    168e:	aa 27       	eor	r26, r26
    1690:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__addsf3x>
    1694:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_round>
    1698:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_pscA>
    169c:	38 f0       	brcs	.+14     	; 0x16ac <__addsf3+0x20>
    169e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fp_pscB>
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <__addsf3+0x20>
    16a4:	39 f4       	brne	.+14     	; 0x16b4 <__addsf3+0x28>
    16a6:	9f 3f       	cpi	r25, 0xFF	; 255
    16a8:	19 f4       	brne	.+6      	; 0x16b0 <__addsf3+0x24>
    16aa:	26 f4       	brtc	.+8      	; 0x16b4 <__addsf3+0x28>
    16ac:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_nan>
    16b0:	0e f4       	brtc	.+2      	; 0x16b4 <__addsf3+0x28>
    16b2:	e0 95       	com	r30
    16b4:	e7 fb       	bst	r30, 7
    16b6:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>

000016ba <__addsf3x>:
    16ba:	e9 2f       	mov	r30, r25
    16bc:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_split3>
    16c0:	58 f3       	brcs	.-42     	; 0x1698 <__addsf3+0xc>
    16c2:	ba 17       	cp	r27, r26
    16c4:	62 07       	cpc	r22, r18
    16c6:	73 07       	cpc	r23, r19
    16c8:	84 07       	cpc	r24, r20
    16ca:	95 07       	cpc	r25, r21
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__addsf3x+0x1c>
    16ce:	79 f4       	brne	.+30     	; 0x16ee <__addsf3x+0x34>
    16d0:	a6 f5       	brtc	.+104    	; 0x173a <__addsf3x+0x80>
    16d2:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_zero>
    16d6:	0e f4       	brtc	.+2      	; 0x16da <__addsf3x+0x20>
    16d8:	e0 95       	com	r30
    16da:	0b 2e       	mov	r0, r27
    16dc:	ba 2f       	mov	r27, r26
    16de:	a0 2d       	mov	r26, r0
    16e0:	0b 01       	movw	r0, r22
    16e2:	b9 01       	movw	r22, r18
    16e4:	90 01       	movw	r18, r0
    16e6:	0c 01       	movw	r0, r24
    16e8:	ca 01       	movw	r24, r20
    16ea:	a0 01       	movw	r20, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	ff 27       	eor	r31, r31
    16f0:	59 1b       	sub	r21, r25
    16f2:	99 f0       	breq	.+38     	; 0x171a <__addsf3x+0x60>
    16f4:	59 3f       	cpi	r21, 0xF9	; 249
    16f6:	50 f4       	brcc	.+20     	; 0x170c <__addsf3x+0x52>
    16f8:	50 3e       	cpi	r21, 0xE0	; 224
    16fa:	68 f1       	brcs	.+90     	; 0x1756 <__addsf3x+0x9c>
    16fc:	1a 16       	cp	r1, r26
    16fe:	f0 40       	sbci	r31, 0x00	; 0
    1700:	a2 2f       	mov	r26, r18
    1702:	23 2f       	mov	r18, r19
    1704:	34 2f       	mov	r19, r20
    1706:	44 27       	eor	r20, r20
    1708:	58 5f       	subi	r21, 0xF8	; 248
    170a:	f3 cf       	rjmp	.-26     	; 0x16f2 <__addsf3x+0x38>
    170c:	46 95       	lsr	r20
    170e:	37 95       	ror	r19
    1710:	27 95       	ror	r18
    1712:	a7 95       	ror	r26
    1714:	f0 40       	sbci	r31, 0x00	; 0
    1716:	53 95       	inc	r21
    1718:	c9 f7       	brne	.-14     	; 0x170c <__addsf3x+0x52>
    171a:	7e f4       	brtc	.+30     	; 0x173a <__addsf3x+0x80>
    171c:	1f 16       	cp	r1, r31
    171e:	ba 0b       	sbc	r27, r26
    1720:	62 0b       	sbc	r22, r18
    1722:	73 0b       	sbc	r23, r19
    1724:	84 0b       	sbc	r24, r20
    1726:	ba f0       	brmi	.+46     	; 0x1756 <__addsf3x+0x9c>
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	a1 f0       	breq	.+40     	; 0x1754 <__addsf3x+0x9a>
    172c:	ff 0f       	add	r31, r31
    172e:	bb 1f       	adc	r27, r27
    1730:	66 1f       	adc	r22, r22
    1732:	77 1f       	adc	r23, r23
    1734:	88 1f       	adc	r24, r24
    1736:	c2 f7       	brpl	.-16     	; 0x1728 <__addsf3x+0x6e>
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <__addsf3x+0x9c>
    173a:	ba 0f       	add	r27, r26
    173c:	62 1f       	adc	r22, r18
    173e:	73 1f       	adc	r23, r19
    1740:	84 1f       	adc	r24, r20
    1742:	48 f4       	brcc	.+18     	; 0x1756 <__addsf3x+0x9c>
    1744:	87 95       	ror	r24
    1746:	77 95       	ror	r23
    1748:	67 95       	ror	r22
    174a:	b7 95       	ror	r27
    174c:	f7 95       	ror	r31
    174e:	9e 3f       	cpi	r25, 0xFE	; 254
    1750:	08 f0       	brcs	.+2      	; 0x1754 <__addsf3x+0x9a>
    1752:	b0 cf       	rjmp	.-160    	; 0x16b4 <__addsf3+0x28>
    1754:	93 95       	inc	r25
    1756:	88 0f       	add	r24, r24
    1758:	08 f0       	brcs	.+2      	; 0x175c <__addsf3x+0xa2>
    175a:	99 27       	eor	r25, r25
    175c:	ee 0f       	add	r30, r30
    175e:	97 95       	ror	r25
    1760:	87 95       	ror	r24
    1762:	08 95       	ret

00001764 <atan>:
    1764:	df 93       	push	r29
    1766:	dd 27       	eor	r29, r29
    1768:	b9 2f       	mov	r27, r25
    176a:	bf 77       	andi	r27, 0x7F	; 127
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	16 16       	cp	r1, r22
    1772:	17 06       	cpc	r1, r23
    1774:	48 07       	cpc	r20, r24
    1776:	5b 07       	cpc	r21, r27
    1778:	18 f4       	brcc	.+6      	; 0x1780 <atan+0x1c>
    177a:	d9 2f       	mov	r29, r25
    177c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <inverse>
    1780:	9f 93       	push	r25
    1782:	8f 93       	push	r24
    1784:	7f 93       	push	r23
    1786:	6f 93       	push	r22
    1788:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <square>
    178c:	e4 e5       	ldi	r30, 0x54	; 84
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fp_powser>
    1794:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fp_round>
    1798:	2f 91       	pop	r18
    179a:	3f 91       	pop	r19
    179c:	4f 91       	pop	r20
    179e:	5f 91       	pop	r21
    17a0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3x>
    17a4:	dd 23       	and	r29, r29
    17a6:	51 f0       	breq	.+20     	; 0x17bc <atan+0x58>
    17a8:	90 58       	subi	r25, 0x80	; 128
    17aa:	a2 ea       	ldi	r26, 0xA2	; 162
    17ac:	2a ed       	ldi	r18, 0xDA	; 218
    17ae:	3f e0       	ldi	r19, 0x0F	; 15
    17b0:	49 ec       	ldi	r20, 0xC9	; 201
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	d0 78       	andi	r29, 0x80	; 128
    17b6:	5d 27       	eor	r21, r29
    17b8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__addsf3x>
    17bc:	df 91       	pop	r29
    17be:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_round>

000017c2 <__cmpsf2>:
    17c2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_cmp>
    17c6:	08 f4       	brcc	.+2      	; 0x17ca <__cmpsf2+0x8>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	08 95       	ret

000017cc <__divsf3>:
    17cc:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__divsf3x>
    17d0:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_round>
    17d4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fp_pscB>
    17d8:	58 f0       	brcs	.+22     	; 0x17f0 <__divsf3+0x24>
    17da:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_pscA>
    17de:	40 f0       	brcs	.+16     	; 0x17f0 <__divsf3+0x24>
    17e0:	29 f4       	brne	.+10     	; 0x17ec <__divsf3+0x20>
    17e2:	5f 3f       	cpi	r21, 0xFF	; 255
    17e4:	29 f0       	breq	.+10     	; 0x17f0 <__divsf3+0x24>
    17e6:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    17ea:	51 11       	cpse	r21, r1
    17ec:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__fp_szero>
    17f0:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_nan>

000017f4 <__divsf3x>:
    17f4:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_split3>
    17f8:	68 f3       	brcs	.-38     	; 0x17d4 <__divsf3+0x8>

000017fa <__divsf3_pse>:
    17fa:	99 23       	and	r25, r25
    17fc:	b1 f3       	breq	.-20     	; 0x17ea <__divsf3+0x1e>
    17fe:	55 23       	and	r21, r21
    1800:	91 f3       	breq	.-28     	; 0x17e6 <__divsf3+0x1a>
    1802:	95 1b       	sub	r25, r21
    1804:	55 0b       	sbc	r21, r21
    1806:	bb 27       	eor	r27, r27
    1808:	aa 27       	eor	r26, r26
    180a:	62 17       	cp	r22, r18
    180c:	73 07       	cpc	r23, r19
    180e:	84 07       	cpc	r24, r20
    1810:	38 f0       	brcs	.+14     	; 0x1820 <__divsf3_pse+0x26>
    1812:	9f 5f       	subi	r25, 0xFF	; 255
    1814:	5f 4f       	sbci	r21, 0xFF	; 255
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	44 1f       	adc	r20, r20
    181c:	aa 1f       	adc	r26, r26
    181e:	a9 f3       	breq	.-22     	; 0x180a <__divsf3_pse+0x10>
    1820:	35 d0       	rcall	.+106    	; 0x188c <__divsf3_pse+0x92>
    1822:	0e 2e       	mov	r0, r30
    1824:	3a f0       	brmi	.+14     	; 0x1834 <__divsf3_pse+0x3a>
    1826:	e0 e8       	ldi	r30, 0x80	; 128
    1828:	32 d0       	rcall	.+100    	; 0x188e <__divsf3_pse+0x94>
    182a:	91 50       	subi	r25, 0x01	; 1
    182c:	50 40       	sbci	r21, 0x00	; 0
    182e:	e6 95       	lsr	r30
    1830:	00 1c       	adc	r0, r0
    1832:	ca f7       	brpl	.-14     	; 0x1826 <__divsf3_pse+0x2c>
    1834:	2b d0       	rcall	.+86     	; 0x188c <__divsf3_pse+0x92>
    1836:	fe 2f       	mov	r31, r30
    1838:	29 d0       	rcall	.+82     	; 0x188c <__divsf3_pse+0x92>
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	bb 1f       	adc	r27, r27
    1842:	26 17       	cp	r18, r22
    1844:	37 07       	cpc	r19, r23
    1846:	48 07       	cpc	r20, r24
    1848:	ab 07       	cpc	r26, r27
    184a:	b0 e8       	ldi	r27, 0x80	; 128
    184c:	09 f0       	breq	.+2      	; 0x1850 <__divsf3_pse+0x56>
    184e:	bb 0b       	sbc	r27, r27
    1850:	80 2d       	mov	r24, r0
    1852:	bf 01       	movw	r22, r30
    1854:	ff 27       	eor	r31, r31
    1856:	93 58       	subi	r25, 0x83	; 131
    1858:	5f 4f       	sbci	r21, 0xFF	; 255
    185a:	3a f0       	brmi	.+14     	; 0x186a <__divsf3_pse+0x70>
    185c:	9e 3f       	cpi	r25, 0xFE	; 254
    185e:	51 05       	cpc	r21, r1
    1860:	78 f0       	brcs	.+30     	; 0x1880 <__divsf3_pse+0x86>
    1862:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    1866:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__fp_szero>
    186a:	5f 3f       	cpi	r21, 0xFF	; 255
    186c:	e4 f3       	brlt	.-8      	; 0x1866 <__divsf3_pse+0x6c>
    186e:	98 3e       	cpi	r25, 0xE8	; 232
    1870:	d4 f3       	brlt	.-12     	; 0x1866 <__divsf3_pse+0x6c>
    1872:	86 95       	lsr	r24
    1874:	77 95       	ror	r23
    1876:	67 95       	ror	r22
    1878:	b7 95       	ror	r27
    187a:	f7 95       	ror	r31
    187c:	9f 5f       	subi	r25, 0xFF	; 255
    187e:	c9 f7       	brne	.-14     	; 0x1872 <__divsf3_pse+0x78>
    1880:	88 0f       	add	r24, r24
    1882:	91 1d       	adc	r25, r1
    1884:	96 95       	lsr	r25
    1886:	87 95       	ror	r24
    1888:	97 f9       	bld	r25, 7
    188a:	08 95       	ret
    188c:	e1 e0       	ldi	r30, 0x01	; 1
    188e:	66 0f       	add	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	bb 1f       	adc	r27, r27
    1896:	62 17       	cp	r22, r18
    1898:	73 07       	cpc	r23, r19
    189a:	84 07       	cpc	r24, r20
    189c:	ba 07       	cpc	r27, r26
    189e:	20 f0       	brcs	.+8      	; 0x18a8 <__divsf3_pse+0xae>
    18a0:	62 1b       	sub	r22, r18
    18a2:	73 0b       	sbc	r23, r19
    18a4:	84 0b       	sbc	r24, r20
    18a6:	ba 0b       	sbc	r27, r26
    18a8:	ee 1f       	adc	r30, r30
    18aa:	88 f7       	brcc	.-30     	; 0x188e <__divsf3_pse+0x94>
    18ac:	e0 95       	com	r30
    18ae:	08 95       	ret

000018b0 <__fixunssfsi>:
    18b0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_splitA>
    18b4:	88 f0       	brcs	.+34     	; 0x18d8 <__fixunssfsi+0x28>
    18b6:	9f 57       	subi	r25, 0x7F	; 127
    18b8:	98 f0       	brcs	.+38     	; 0x18e0 <__fixunssfsi+0x30>
    18ba:	b9 2f       	mov	r27, r25
    18bc:	99 27       	eor	r25, r25
    18be:	b7 51       	subi	r27, 0x17	; 23
    18c0:	b0 f0       	brcs	.+44     	; 0x18ee <__fixunssfsi+0x3e>
    18c2:	e1 f0       	breq	.+56     	; 0x18fc <__fixunssfsi+0x4c>
    18c4:	66 0f       	add	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	88 1f       	adc	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	1a f0       	brmi	.+6      	; 0x18d4 <__fixunssfsi+0x24>
    18ce:	ba 95       	dec	r27
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__fixunssfsi+0x14>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <__fixunssfsi+0x4c>
    18d4:	b1 30       	cpi	r27, 0x01	; 1
    18d6:	91 f0       	breq	.+36     	; 0x18fc <__fixunssfsi+0x4c>
    18d8:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__fp_zero>
    18dc:	b1 e0       	ldi	r27, 0x01	; 1
    18de:	08 95       	ret
    18e0:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_zero>
    18e4:	67 2f       	mov	r22, r23
    18e6:	78 2f       	mov	r23, r24
    18e8:	88 27       	eor	r24, r24
    18ea:	b8 5f       	subi	r27, 0xF8	; 248
    18ec:	39 f0       	breq	.+14     	; 0x18fc <__fixunssfsi+0x4c>
    18ee:	b9 3f       	cpi	r27, 0xF9	; 249
    18f0:	cc f3       	brlt	.-14     	; 0x18e4 <__fixunssfsi+0x34>
    18f2:	86 95       	lsr	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	b3 95       	inc	r27
    18fa:	d9 f7       	brne	.-10     	; 0x18f2 <__fixunssfsi+0x42>
    18fc:	3e f4       	brtc	.+14     	; 0x190c <__fixunssfsi+0x5c>
    18fe:	90 95       	com	r25
    1900:	80 95       	com	r24
    1902:	70 95       	com	r23
    1904:	61 95       	neg	r22
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	8f 4f       	sbci	r24, 0xFF	; 255
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	08 95       	ret

0000190e <__floatunsisf>:
    190e:	e8 94       	clt
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <__floatsisf+0x12>

00001912 <__floatsisf>:
    1912:	97 fb       	bst	r25, 7
    1914:	3e f4       	brtc	.+14     	; 0x1924 <__floatsisf+0x12>
    1916:	90 95       	com	r25
    1918:	80 95       	com	r24
    191a:	70 95       	com	r23
    191c:	61 95       	neg	r22
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	8f 4f       	sbci	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	99 23       	and	r25, r25
    1926:	a9 f0       	breq	.+42     	; 0x1952 <__floatsisf+0x40>
    1928:	f9 2f       	mov	r31, r25
    192a:	96 e9       	ldi	r25, 0x96	; 150
    192c:	bb 27       	eor	r27, r27
    192e:	93 95       	inc	r25
    1930:	f6 95       	lsr	r31
    1932:	87 95       	ror	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	b7 95       	ror	r27
    193a:	f1 11       	cpse	r31, r1
    193c:	f8 cf       	rjmp	.-16     	; 0x192e <__floatsisf+0x1c>
    193e:	fa f4       	brpl	.+62     	; 0x197e <__floatsisf+0x6c>
    1940:	bb 0f       	add	r27, r27
    1942:	11 f4       	brne	.+4      	; 0x1948 <__floatsisf+0x36>
    1944:	60 ff       	sbrs	r22, 0
    1946:	1b c0       	rjmp	.+54     	; 0x197e <__floatsisf+0x6c>
    1948:	6f 5f       	subi	r22, 0xFF	; 255
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	8f 4f       	sbci	r24, 0xFF	; 255
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	16 c0       	rjmp	.+44     	; 0x197e <__floatsisf+0x6c>
    1952:	88 23       	and	r24, r24
    1954:	11 f0       	breq	.+4      	; 0x195a <__floatsisf+0x48>
    1956:	96 e9       	ldi	r25, 0x96	; 150
    1958:	11 c0       	rjmp	.+34     	; 0x197c <__floatsisf+0x6a>
    195a:	77 23       	and	r23, r23
    195c:	21 f0       	breq	.+8      	; 0x1966 <__floatsisf+0x54>
    195e:	9e e8       	ldi	r25, 0x8E	; 142
    1960:	87 2f       	mov	r24, r23
    1962:	76 2f       	mov	r23, r22
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <__floatsisf+0x5e>
    1966:	66 23       	and	r22, r22
    1968:	71 f0       	breq	.+28     	; 0x1986 <__floatsisf+0x74>
    196a:	96 e8       	ldi	r25, 0x86	; 134
    196c:	86 2f       	mov	r24, r22
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	2a f0       	brmi	.+10     	; 0x197e <__floatsisf+0x6c>
    1974:	9a 95       	dec	r25
    1976:	66 0f       	add	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	88 1f       	adc	r24, r24
    197c:	da f7       	brpl	.-10     	; 0x1974 <__floatsisf+0x62>
    197e:	88 0f       	add	r24, r24
    1980:	96 95       	lsr	r25
    1982:	87 95       	ror	r24
    1984:	97 f9       	bld	r25, 7
    1986:	08 95       	ret

00001988 <__fp_cmp>:
    1988:	99 0f       	add	r25, r25
    198a:	00 08       	sbc	r0, r0
    198c:	55 0f       	add	r21, r21
    198e:	aa 0b       	sbc	r26, r26
    1990:	e0 e8       	ldi	r30, 0x80	; 128
    1992:	fe ef       	ldi	r31, 0xFE	; 254
    1994:	16 16       	cp	r1, r22
    1996:	17 06       	cpc	r1, r23
    1998:	e8 07       	cpc	r30, r24
    199a:	f9 07       	cpc	r31, r25
    199c:	c0 f0       	brcs	.+48     	; 0x19ce <__fp_cmp+0x46>
    199e:	12 16       	cp	r1, r18
    19a0:	13 06       	cpc	r1, r19
    19a2:	e4 07       	cpc	r30, r20
    19a4:	f5 07       	cpc	r31, r21
    19a6:	98 f0       	brcs	.+38     	; 0x19ce <__fp_cmp+0x46>
    19a8:	62 1b       	sub	r22, r18
    19aa:	73 0b       	sbc	r23, r19
    19ac:	84 0b       	sbc	r24, r20
    19ae:	95 0b       	sbc	r25, r21
    19b0:	39 f4       	brne	.+14     	; 0x19c0 <__fp_cmp+0x38>
    19b2:	0a 26       	eor	r0, r26
    19b4:	61 f0       	breq	.+24     	; 0x19ce <__fp_cmp+0x46>
    19b6:	23 2b       	or	r18, r19
    19b8:	24 2b       	or	r18, r20
    19ba:	25 2b       	or	r18, r21
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <__fp_cmp+0x3e>
    19be:	08 95       	ret
    19c0:	0a 26       	eor	r0, r26
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <__fp_cmp+0x3e>
    19c4:	a1 40       	sbci	r26, 0x01	; 1
    19c6:	a6 95       	lsr	r26
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	81 1d       	adc	r24, r1
    19cc:	81 1d       	adc	r24, r1
    19ce:	08 95       	ret

000019d0 <__fp_inf>:
    19d0:	97 f9       	bld	r25, 7
    19d2:	9f 67       	ori	r25, 0x7F	; 127
    19d4:	80 e8       	ldi	r24, 0x80	; 128
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	08 95       	ret

000019dc <__fp_nan>:
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	80 ec       	ldi	r24, 0xC0	; 192
    19e0:	08 95       	ret

000019e2 <__fp_powser>:
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	1f 93       	push	r17
    19e8:	0f 93       	push	r16
    19ea:	ff 92       	push	r15
    19ec:	ef 92       	push	r14
    19ee:	df 92       	push	r13
    19f0:	7b 01       	movw	r14, r22
    19f2:	8c 01       	movw	r16, r24
    19f4:	68 94       	set
    19f6:	06 c0       	rjmp	.+12     	; 0x1a04 <__fp_powser+0x22>
    19f8:	da 2e       	mov	r13, r26
    19fa:	ef 01       	movw	r28, r30
    19fc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3x>
    1a00:	fe 01       	movw	r30, r28
    1a02:	e8 94       	clt
    1a04:	a5 91       	lpm	r26, Z+
    1a06:	25 91       	lpm	r18, Z+
    1a08:	35 91       	lpm	r19, Z+
    1a0a:	45 91       	lpm	r20, Z+
    1a0c:	55 91       	lpm	r21, Z+
    1a0e:	a6 f3       	brts	.-24     	; 0x19f8 <__fp_powser+0x16>
    1a10:	ef 01       	movw	r28, r30
    1a12:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__addsf3x>
    1a16:	fe 01       	movw	r30, r28
    1a18:	97 01       	movw	r18, r14
    1a1a:	a8 01       	movw	r20, r16
    1a1c:	da 94       	dec	r13
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <__fp_powser+0x18>
    1a20:	df 90       	pop	r13
    1a22:	ef 90       	pop	r14
    1a24:	ff 90       	pop	r15
    1a26:	0f 91       	pop	r16
    1a28:	1f 91       	pop	r17
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <__fp_pscA>:
    1a30:	00 24       	eor	r0, r0
    1a32:	0a 94       	dec	r0
    1a34:	16 16       	cp	r1, r22
    1a36:	17 06       	cpc	r1, r23
    1a38:	18 06       	cpc	r1, r24
    1a3a:	09 06       	cpc	r0, r25
    1a3c:	08 95       	ret

00001a3e <__fp_pscB>:
    1a3e:	00 24       	eor	r0, r0
    1a40:	0a 94       	dec	r0
    1a42:	12 16       	cp	r1, r18
    1a44:	13 06       	cpc	r1, r19
    1a46:	14 06       	cpc	r1, r20
    1a48:	05 06       	cpc	r0, r21
    1a4a:	08 95       	ret

00001a4c <__fp_round>:
    1a4c:	09 2e       	mov	r0, r25
    1a4e:	03 94       	inc	r0
    1a50:	00 0c       	add	r0, r0
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <__fp_round+0xc>
    1a54:	88 23       	and	r24, r24
    1a56:	52 f0       	brmi	.+20     	; 0x1a6c <__fp_round+0x20>
    1a58:	bb 0f       	add	r27, r27
    1a5a:	40 f4       	brcc	.+16     	; 0x1a6c <__fp_round+0x20>
    1a5c:	bf 2b       	or	r27, r31
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <__fp_round+0x18>
    1a60:	60 ff       	sbrs	r22, 0
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__fp_round+0x20>
    1a64:	6f 5f       	subi	r22, 0xFF	; 255
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	08 95       	ret

00001a6e <__fp_split3>:
    1a6e:	57 fd       	sbrc	r21, 7
    1a70:	90 58       	subi	r25, 0x80	; 128
    1a72:	44 0f       	add	r20, r20
    1a74:	55 1f       	adc	r21, r21
    1a76:	59 f0       	breq	.+22     	; 0x1a8e <__fp_splitA+0x10>
    1a78:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7a:	71 f0       	breq	.+28     	; 0x1a98 <__fp_splitA+0x1a>
    1a7c:	47 95       	ror	r20

00001a7e <__fp_splitA>:
    1a7e:	88 0f       	add	r24, r24
    1a80:	97 fb       	bst	r25, 7
    1a82:	99 1f       	adc	r25, r25
    1a84:	61 f0       	breq	.+24     	; 0x1a9e <__fp_splitA+0x20>
    1a86:	9f 3f       	cpi	r25, 0xFF	; 255
    1a88:	79 f0       	breq	.+30     	; 0x1aa8 <__fp_splitA+0x2a>
    1a8a:	87 95       	ror	r24
    1a8c:	08 95       	ret
    1a8e:	12 16       	cp	r1, r18
    1a90:	13 06       	cpc	r1, r19
    1a92:	14 06       	cpc	r1, r20
    1a94:	55 1f       	adc	r21, r21
    1a96:	f2 cf       	rjmp	.-28     	; 0x1a7c <__fp_split3+0xe>
    1a98:	46 95       	lsr	r20
    1a9a:	f1 df       	rcall	.-30     	; 0x1a7e <__fp_splitA>
    1a9c:	08 c0       	rjmp	.+16     	; 0x1aae <__fp_splitA+0x30>
    1a9e:	16 16       	cp	r1, r22
    1aa0:	17 06       	cpc	r1, r23
    1aa2:	18 06       	cpc	r1, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	f1 cf       	rjmp	.-30     	; 0x1a8a <__fp_splitA+0xc>
    1aa8:	86 95       	lsr	r24
    1aaa:	71 05       	cpc	r23, r1
    1aac:	61 05       	cpc	r22, r1
    1aae:	08 94       	sec
    1ab0:	08 95       	ret

00001ab2 <__fp_zero>:
    1ab2:	e8 94       	clt

00001ab4 <__fp_szero>:
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	66 27       	eor	r22, r22
    1ab8:	77 27       	eor	r23, r23
    1aba:	cb 01       	movw	r24, r22
    1abc:	97 f9       	bld	r25, 7
    1abe:	08 95       	ret

00001ac0 <__gesf2>:
    1ac0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_cmp>
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <__gesf2+0x8>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <inverse>:
    1aca:	9b 01       	movw	r18, r22
    1acc:	ac 01       	movw	r20, r24
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 e8       	ldi	r24, 0x80	; 128
    1ad4:	9f e3       	ldi	r25, 0x3F	; 63
    1ad6:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__divsf3>

00001ada <__mulsf3>:
    1ada:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__mulsf3x>
    1ade:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__fp_round>
    1ae2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_pscA>
    1ae6:	38 f0       	brcs	.+14     	; 0x1af6 <__mulsf3+0x1c>
    1ae8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fp_pscB>
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <__mulsf3+0x1c>
    1aee:	95 23       	and	r25, r21
    1af0:	11 f0       	breq	.+4      	; 0x1af6 <__mulsf3+0x1c>
    1af2:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    1af6:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_nan>
    1afa:	11 24       	eor	r1, r1
    1afc:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__fp_szero>

00001b00 <__mulsf3x>:
    1b00:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_split3>
    1b04:	70 f3       	brcs	.-36     	; 0x1ae2 <__mulsf3+0x8>

00001b06 <__mulsf3_pse>:
    1b06:	95 9f       	mul	r25, r21
    1b08:	c1 f3       	breq	.-16     	; 0x1afa <__mulsf3+0x20>
    1b0a:	95 0f       	add	r25, r21
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	55 1f       	adc	r21, r21
    1b10:	62 9f       	mul	r22, r18
    1b12:	f0 01       	movw	r30, r0
    1b14:	72 9f       	mul	r23, r18
    1b16:	bb 27       	eor	r27, r27
    1b18:	f0 0d       	add	r31, r0
    1b1a:	b1 1d       	adc	r27, r1
    1b1c:	63 9f       	mul	r22, r19
    1b1e:	aa 27       	eor	r26, r26
    1b20:	f0 0d       	add	r31, r0
    1b22:	b1 1d       	adc	r27, r1
    1b24:	aa 1f       	adc	r26, r26
    1b26:	64 9f       	mul	r22, r20
    1b28:	66 27       	eor	r22, r22
    1b2a:	b0 0d       	add	r27, r0
    1b2c:	a1 1d       	adc	r26, r1
    1b2e:	66 1f       	adc	r22, r22
    1b30:	82 9f       	mul	r24, r18
    1b32:	22 27       	eor	r18, r18
    1b34:	b0 0d       	add	r27, r0
    1b36:	a1 1d       	adc	r26, r1
    1b38:	62 1f       	adc	r22, r18
    1b3a:	73 9f       	mul	r23, r19
    1b3c:	b0 0d       	add	r27, r0
    1b3e:	a1 1d       	adc	r26, r1
    1b40:	62 1f       	adc	r22, r18
    1b42:	83 9f       	mul	r24, r19
    1b44:	a0 0d       	add	r26, r0
    1b46:	61 1d       	adc	r22, r1
    1b48:	22 1f       	adc	r18, r18
    1b4a:	74 9f       	mul	r23, r20
    1b4c:	33 27       	eor	r19, r19
    1b4e:	a0 0d       	add	r26, r0
    1b50:	61 1d       	adc	r22, r1
    1b52:	23 1f       	adc	r18, r19
    1b54:	84 9f       	mul	r24, r20
    1b56:	60 0d       	add	r22, r0
    1b58:	21 1d       	adc	r18, r1
    1b5a:	82 2f       	mov	r24, r18
    1b5c:	76 2f       	mov	r23, r22
    1b5e:	6a 2f       	mov	r22, r26
    1b60:	11 24       	eor	r1, r1
    1b62:	9f 57       	subi	r25, 0x7F	; 127
    1b64:	50 40       	sbci	r21, 0x00	; 0
    1b66:	9a f0       	brmi	.+38     	; 0x1b8e <__mulsf3_pse+0x88>
    1b68:	f1 f0       	breq	.+60     	; 0x1ba6 <__mulsf3_pse+0xa0>
    1b6a:	88 23       	and	r24, r24
    1b6c:	4a f0       	brmi	.+18     	; 0x1b80 <__mulsf3_pse+0x7a>
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	bb 1f       	adc	r27, r27
    1b74:	66 1f       	adc	r22, r22
    1b76:	77 1f       	adc	r23, r23
    1b78:	88 1f       	adc	r24, r24
    1b7a:	91 50       	subi	r25, 0x01	; 1
    1b7c:	50 40       	sbci	r21, 0x00	; 0
    1b7e:	a9 f7       	brne	.-22     	; 0x1b6a <__mulsf3_pse+0x64>
    1b80:	9e 3f       	cpi	r25, 0xFE	; 254
    1b82:	51 05       	cpc	r21, r1
    1b84:	80 f0       	brcs	.+32     	; 0x1ba6 <__mulsf3_pse+0xa0>
    1b86:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_inf>
    1b8a:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__fp_szero>
    1b8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b90:	e4 f3       	brlt	.-8      	; 0x1b8a <__mulsf3_pse+0x84>
    1b92:	98 3e       	cpi	r25, 0xE8	; 232
    1b94:	d4 f3       	brlt	.-12     	; 0x1b8a <__mulsf3_pse+0x84>
    1b96:	86 95       	lsr	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b7 95       	ror	r27
    1b9e:	f7 95       	ror	r31
    1ba0:	e7 95       	ror	r30
    1ba2:	9f 5f       	subi	r25, 0xFF	; 255
    1ba4:	c1 f7       	brne	.-16     	; 0x1b96 <__mulsf3_pse+0x90>
    1ba6:	fe 2b       	or	r31, r30
    1ba8:	88 0f       	add	r24, r24
    1baa:	91 1d       	adc	r25, r1
    1bac:	96 95       	lsr	r25
    1bae:	87 95       	ror	r24
    1bb0:	97 f9       	bld	r25, 7
    1bb2:	08 95       	ret
    1bb4:	19 f4       	brne	.+6      	; 0x1bbc <__mulsf3_pse+0xb6>
    1bb6:	16 f4       	brtc	.+4      	; 0x1bbc <__mulsf3_pse+0xb6>
    1bb8:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_nan>
    1bbc:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__fp_mpack>

00001bc0 <sqrt>:
    1bc0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_splitA>
    1bc4:	b8 f3       	brcs	.-18     	; 0x1bb4 <__mulsf3_pse+0xae>
    1bc6:	99 23       	and	r25, r25
    1bc8:	c9 f3       	breq	.-14     	; 0x1bbc <__mulsf3_pse+0xb6>
    1bca:	b6 f3       	brts	.-20     	; 0x1bb8 <__mulsf3_pse+0xb2>
    1bcc:	9f 57       	subi	r25, 0x7F	; 127
    1bce:	55 0b       	sbc	r21, r21
    1bd0:	87 ff       	sbrs	r24, 7
    1bd2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__fp_norm2>
    1bd6:	00 24       	eor	r0, r0
    1bd8:	a0 e6       	ldi	r26, 0x60	; 96
    1bda:	40 ea       	ldi	r20, 0xA0	; 160
    1bdc:	90 01       	movw	r18, r0
    1bde:	80 58       	subi	r24, 0x80	; 128
    1be0:	56 95       	lsr	r21
    1be2:	97 95       	ror	r25
    1be4:	28 f4       	brcc	.+10     	; 0x1bf0 <sqrt+0x30>
    1be6:	80 5c       	subi	r24, 0xC0	; 192
    1be8:	66 0f       	add	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	20 f0       	brcs	.+8      	; 0x1bf8 <sqrt+0x38>
    1bf0:	26 17       	cp	r18, r22
    1bf2:	37 07       	cpc	r19, r23
    1bf4:	48 07       	cpc	r20, r24
    1bf6:	30 f4       	brcc	.+12     	; 0x1c04 <sqrt+0x44>
    1bf8:	62 1b       	sub	r22, r18
    1bfa:	73 0b       	sbc	r23, r19
    1bfc:	84 0b       	sbc	r24, r20
    1bfe:	20 29       	or	r18, r0
    1c00:	31 29       	or	r19, r1
    1c02:	4a 2b       	or	r20, r26
    1c04:	a6 95       	lsr	r26
    1c06:	17 94       	ror	r1
    1c08:	07 94       	ror	r0
    1c0a:	20 25       	eor	r18, r0
    1c0c:	31 25       	eor	r19, r1
    1c0e:	4a 27       	eor	r20, r26
    1c10:	58 f7       	brcc	.-42     	; 0x1be8 <sqrt+0x28>
    1c12:	66 0f       	add	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	20 f0       	brcs	.+8      	; 0x1c22 <sqrt+0x62>
    1c1a:	26 17       	cp	r18, r22
    1c1c:	37 07       	cpc	r19, r23
    1c1e:	48 07       	cpc	r20, r24
    1c20:	30 f4       	brcc	.+12     	; 0x1c2e <sqrt+0x6e>
    1c22:	62 0b       	sbc	r22, r18
    1c24:	73 0b       	sbc	r23, r19
    1c26:	84 0b       	sbc	r24, r20
    1c28:	20 0d       	add	r18, r0
    1c2a:	31 1d       	adc	r19, r1
    1c2c:	41 1d       	adc	r20, r1
    1c2e:	a0 95       	com	r26
    1c30:	81 f7       	brne	.-32     	; 0x1c12 <sqrt+0x52>
    1c32:	b9 01       	movw	r22, r18
    1c34:	84 2f       	mov	r24, r20
    1c36:	91 58       	subi	r25, 0x81	; 129
    1c38:	88 0f       	add	r24, r24
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	08 95       	ret

00001c40 <square>:
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__mulsf3>

00001c48 <__fp_mpack>:
    1c48:	9f 3f       	cpi	r25, 0xFF	; 255
    1c4a:	31 f0       	breq	.+12     	; 0x1c58 <__fp_mpack_finite+0xc>

00001c4c <__fp_mpack_finite>:
    1c4c:	91 50       	subi	r25, 0x01	; 1
    1c4e:	20 f4       	brcc	.+8      	; 0x1c58 <__fp_mpack_finite+0xc>
    1c50:	87 95       	ror	r24
    1c52:	77 95       	ror	r23
    1c54:	67 95       	ror	r22
    1c56:	b7 95       	ror	r27
    1c58:	88 0f       	add	r24, r24
    1c5a:	91 1d       	adc	r25, r1
    1c5c:	96 95       	lsr	r25
    1c5e:	87 95       	ror	r24
    1c60:	97 f9       	bld	r25, 7
    1c62:	08 95       	ret

00001c64 <__fp_norm2>:
    1c64:	91 50       	subi	r25, 0x01	; 1
    1c66:	50 40       	sbci	r21, 0x00	; 0
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	d2 f7       	brpl	.-12     	; 0x1c64 <__fp_norm2>
    1c70:	08 95       	ret

00001c72 <__udivmodsi4>:
    1c72:	a1 e2       	ldi	r26, 0x21	; 33
    1c74:	1a 2e       	mov	r1, r26
    1c76:	aa 1b       	sub	r26, r26
    1c78:	bb 1b       	sub	r27, r27
    1c7a:	fd 01       	movw	r30, r26
    1c7c:	0d c0       	rjmp	.+26     	; 0x1c98 <__udivmodsi4_ep>

00001c7e <__udivmodsi4_loop>:
    1c7e:	aa 1f       	adc	r26, r26
    1c80:	bb 1f       	adc	r27, r27
    1c82:	ee 1f       	adc	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	a2 17       	cp	r26, r18
    1c88:	b3 07       	cpc	r27, r19
    1c8a:	e4 07       	cpc	r30, r20
    1c8c:	f5 07       	cpc	r31, r21
    1c8e:	20 f0       	brcs	.+8      	; 0x1c98 <__udivmodsi4_ep>
    1c90:	a2 1b       	sub	r26, r18
    1c92:	b3 0b       	sbc	r27, r19
    1c94:	e4 0b       	sbc	r30, r20
    1c96:	f5 0b       	sbc	r31, r21

00001c98 <__udivmodsi4_ep>:
    1c98:	66 1f       	adc	r22, r22
    1c9a:	77 1f       	adc	r23, r23
    1c9c:	88 1f       	adc	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	1a 94       	dec	r1
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <__udivmodsi4_loop>
    1ca4:	60 95       	com	r22
    1ca6:	70 95       	com	r23
    1ca8:	80 95       	com	r24
    1caa:	90 95       	com	r25
    1cac:	9b 01       	movw	r18, r22
    1cae:	ac 01       	movw	r20, r24
    1cb0:	bd 01       	movw	r22, r26
    1cb2:	cf 01       	movw	r24, r30
    1cb4:	08 95       	ret

00001cb6 <dtostrf>:
    1cb6:	ef 92       	push	r14
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	e8 01       	movw	r28, r16
    1cc2:	47 fd       	sbrc	r20, 7
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <dtostrf+0x14>
    1cc6:	34 e0       	ldi	r19, 0x04	; 4
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <dtostrf+0x16>
    1cca:	34 e1       	ldi	r19, 0x14	; 20
    1ccc:	04 2e       	mov	r0, r20
    1cce:	00 0c       	add	r0, r0
    1cd0:	55 0b       	sbc	r21, r21
    1cd2:	57 ff       	sbrs	r21, 7
    1cd4:	03 c0       	rjmp	.+6      	; 0x1cdc <dtostrf+0x26>
    1cd6:	51 95       	neg	r21
    1cd8:	41 95       	neg	r20
    1cda:	51 09       	sbc	r21, r1
    1cdc:	e3 2e       	mov	r14, r19
    1cde:	02 2f       	mov	r16, r18
    1ce0:	24 2f       	mov	r18, r20
    1ce2:	ae 01       	movw	r20, r28
    1ce4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dtoa_prf>
    1ce8:	ce 01       	movw	r24, r28
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ef 90       	pop	r14
    1cf4:	08 95       	ret

00001cf6 <sprintf>:
    1cf6:	ae e0       	ldi	r26, 0x0E	; 14
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e8       	ldi	r30, 0x81	; 129
    1cfc:	fe e0       	ldi	r31, 0x0E	; 14
    1cfe:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x1c>
    1d02:	0d 89       	ldd	r16, Y+21	; 0x15
    1d04:	1e 89       	ldd	r17, Y+22	; 0x16
    1d06:	86 e0       	ldi	r24, 0x06	; 6
    1d08:	8c 83       	std	Y+4, r24	; 0x04
    1d0a:	1a 83       	std	Y+2, r17	; 0x02
    1d0c:	09 83       	std	Y+1, r16	; 0x01
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	9f e7       	ldi	r25, 0x7F	; 127
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	ae 01       	movw	r20, r28
    1d18:	47 5e       	subi	r20, 0xE7	; 231
    1d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1c:	6f 89       	ldd	r22, Y+23	; 0x17
    1d1e:	78 8d       	ldd	r23, Y+24	; 0x18
    1d20:	ce 01       	movw	r24, r28
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <vfprintf>
    1d28:	ef 81       	ldd	r30, Y+7	; 0x07
    1d2a:	f8 85       	ldd	r31, Y+8	; 0x08
    1d2c:	e0 0f       	add	r30, r16
    1d2e:	f1 1f       	adc	r31, r17
    1d30:	10 82       	st	Z, r1
    1d32:	2e 96       	adiw	r28, 0x0e	; 14
    1d34:	e4 e0       	ldi	r30, 0x04	; 4
    1d36:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x1c>

00001d3a <vfprintf>:
    1d3a:	ab e0       	ldi	r26, 0x0B	; 11
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1d40:	fe e0       	ldi	r31, 0x0E	; 14
    1d42:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__>
    1d46:	6c 01       	movw	r12, r24
    1d48:	7b 01       	movw	r14, r22
    1d4a:	8a 01       	movw	r16, r20
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	17 82       	std	Z+7, r1	; 0x07
    1d50:	16 82       	std	Z+6, r1	; 0x06
    1d52:	83 81       	ldd	r24, Z+3	; 0x03
    1d54:	81 ff       	sbrs	r24, 1
    1d56:	cc c1       	rjmp	.+920    	; 0x20f0 <vfprintf+0x3b6>
    1d58:	ce 01       	movw	r24, r28
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	3c 01       	movw	r6, r24
    1d5e:	f6 01       	movw	r30, r12
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	f7 01       	movw	r30, r14
    1d64:	93 fd       	sbrc	r25, 3
    1d66:	85 91       	lpm	r24, Z+
    1d68:	93 ff       	sbrs	r25, 3
    1d6a:	81 91       	ld	r24, Z+
    1d6c:	7f 01       	movw	r14, r30
    1d6e:	88 23       	and	r24, r24
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <vfprintf+0x3a>
    1d72:	ba c1       	rjmp	.+884    	; 0x20e8 <vfprintf+0x3ae>
    1d74:	85 32       	cpi	r24, 0x25	; 37
    1d76:	39 f4       	brne	.+14     	; 0x1d86 <vfprintf+0x4c>
    1d78:	93 fd       	sbrc	r25, 3
    1d7a:	85 91       	lpm	r24, Z+
    1d7c:	93 ff       	sbrs	r25, 3
    1d7e:	81 91       	ld	r24, Z+
    1d80:	7f 01       	movw	r14, r30
    1d82:	85 32       	cpi	r24, 0x25	; 37
    1d84:	29 f4       	brne	.+10     	; 0x1d90 <vfprintf+0x56>
    1d86:	b6 01       	movw	r22, r12
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    1d8e:	e7 cf       	rjmp	.-50     	; 0x1d5e <vfprintf+0x24>
    1d90:	91 2c       	mov	r9, r1
    1d92:	21 2c       	mov	r2, r1
    1d94:	31 2c       	mov	r3, r1
    1d96:	ff e1       	ldi	r31, 0x1F	; 31
    1d98:	f3 15       	cp	r31, r3
    1d9a:	d8 f0       	brcs	.+54     	; 0x1dd2 <vfprintf+0x98>
    1d9c:	8b 32       	cpi	r24, 0x2B	; 43
    1d9e:	79 f0       	breq	.+30     	; 0x1dbe <vfprintf+0x84>
    1da0:	38 f4       	brcc	.+14     	; 0x1db0 <vfprintf+0x76>
    1da2:	80 32       	cpi	r24, 0x20	; 32
    1da4:	79 f0       	breq	.+30     	; 0x1dc4 <vfprintf+0x8a>
    1da6:	83 32       	cpi	r24, 0x23	; 35
    1da8:	a1 f4       	brne	.+40     	; 0x1dd2 <vfprintf+0x98>
    1daa:	23 2d       	mov	r18, r3
    1dac:	20 61       	ori	r18, 0x10	; 16
    1dae:	1d c0       	rjmp	.+58     	; 0x1dea <vfprintf+0xb0>
    1db0:	8d 32       	cpi	r24, 0x2D	; 45
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <vfprintf+0x92>
    1db4:	80 33       	cpi	r24, 0x30	; 48
    1db6:	69 f4       	brne	.+26     	; 0x1dd2 <vfprintf+0x98>
    1db8:	23 2d       	mov	r18, r3
    1dba:	21 60       	ori	r18, 0x01	; 1
    1dbc:	16 c0       	rjmp	.+44     	; 0x1dea <vfprintf+0xb0>
    1dbe:	83 2d       	mov	r24, r3
    1dc0:	82 60       	ori	r24, 0x02	; 2
    1dc2:	38 2e       	mov	r3, r24
    1dc4:	e3 2d       	mov	r30, r3
    1dc6:	e4 60       	ori	r30, 0x04	; 4
    1dc8:	3e 2e       	mov	r3, r30
    1dca:	2a c0       	rjmp	.+84     	; 0x1e20 <vfprintf+0xe6>
    1dcc:	f3 2d       	mov	r31, r3
    1dce:	f8 60       	ori	r31, 0x08	; 8
    1dd0:	1d c0       	rjmp	.+58     	; 0x1e0c <vfprintf+0xd2>
    1dd2:	37 fc       	sbrc	r3, 7
    1dd4:	2d c0       	rjmp	.+90     	; 0x1e30 <vfprintf+0xf6>
    1dd6:	20 ed       	ldi	r18, 0xD0	; 208
    1dd8:	28 0f       	add	r18, r24
    1dda:	2a 30       	cpi	r18, 0x0A	; 10
    1ddc:	40 f0       	brcs	.+16     	; 0x1dee <vfprintf+0xb4>
    1dde:	8e 32       	cpi	r24, 0x2E	; 46
    1de0:	b9 f4       	brne	.+46     	; 0x1e10 <vfprintf+0xd6>
    1de2:	36 fc       	sbrc	r3, 6
    1de4:	81 c1       	rjmp	.+770    	; 0x20e8 <vfprintf+0x3ae>
    1de6:	23 2d       	mov	r18, r3
    1de8:	20 64       	ori	r18, 0x40	; 64
    1dea:	32 2e       	mov	r3, r18
    1dec:	19 c0       	rjmp	.+50     	; 0x1e20 <vfprintf+0xe6>
    1dee:	36 fe       	sbrs	r3, 6
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <vfprintf+0xc4>
    1df2:	8a e0       	ldi	r24, 0x0A	; 10
    1df4:	98 9e       	mul	r9, r24
    1df6:	20 0d       	add	r18, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	92 2e       	mov	r9, r18
    1dfc:	11 c0       	rjmp	.+34     	; 0x1e20 <vfprintf+0xe6>
    1dfe:	ea e0       	ldi	r30, 0x0A	; 10
    1e00:	2e 9e       	mul	r2, r30
    1e02:	20 0d       	add	r18, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	22 2e       	mov	r2, r18
    1e08:	f3 2d       	mov	r31, r3
    1e0a:	f0 62       	ori	r31, 0x20	; 32
    1e0c:	3f 2e       	mov	r3, r31
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <vfprintf+0xe6>
    1e10:	8c 36       	cpi	r24, 0x6C	; 108
    1e12:	21 f4       	brne	.+8      	; 0x1e1c <vfprintf+0xe2>
    1e14:	83 2d       	mov	r24, r3
    1e16:	80 68       	ori	r24, 0x80	; 128
    1e18:	38 2e       	mov	r3, r24
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <vfprintf+0xe6>
    1e1c:	88 36       	cpi	r24, 0x68	; 104
    1e1e:	41 f4       	brne	.+16     	; 0x1e30 <vfprintf+0xf6>
    1e20:	f7 01       	movw	r30, r14
    1e22:	93 fd       	sbrc	r25, 3
    1e24:	85 91       	lpm	r24, Z+
    1e26:	93 ff       	sbrs	r25, 3
    1e28:	81 91       	ld	r24, Z+
    1e2a:	7f 01       	movw	r14, r30
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	b3 cf       	rjmp	.-154    	; 0x1d96 <vfprintf+0x5c>
    1e30:	98 2f       	mov	r25, r24
    1e32:	9f 7d       	andi	r25, 0xDF	; 223
    1e34:	95 54       	subi	r25, 0x45	; 69
    1e36:	93 30       	cpi	r25, 0x03	; 3
    1e38:	28 f4       	brcc	.+10     	; 0x1e44 <vfprintf+0x10a>
    1e3a:	0c 5f       	subi	r16, 0xFC	; 252
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	9f e3       	ldi	r25, 0x3F	; 63
    1e40:	99 83       	std	Y+1, r25	; 0x01
    1e42:	0d c0       	rjmp	.+26     	; 0x1e5e <vfprintf+0x124>
    1e44:	83 36       	cpi	r24, 0x63	; 99
    1e46:	31 f0       	breq	.+12     	; 0x1e54 <vfprintf+0x11a>
    1e48:	83 37       	cpi	r24, 0x73	; 115
    1e4a:	71 f0       	breq	.+28     	; 0x1e68 <vfprintf+0x12e>
    1e4c:	83 35       	cpi	r24, 0x53	; 83
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <vfprintf+0x118>
    1e50:	59 c0       	rjmp	.+178    	; 0x1f04 <vfprintf+0x1ca>
    1e52:	21 c0       	rjmp	.+66     	; 0x1e96 <vfprintf+0x15c>
    1e54:	f8 01       	movw	r30, r16
    1e56:	80 81       	ld	r24, Z
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	0e 5f       	subi	r16, 0xFE	; 254
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	88 24       	eor	r8, r8
    1e60:	83 94       	inc	r8
    1e62:	91 2c       	mov	r9, r1
    1e64:	53 01       	movw	r10, r6
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <vfprintf+0x154>
    1e68:	28 01       	movw	r4, r16
    1e6a:	f2 e0       	ldi	r31, 0x02	; 2
    1e6c:	4f 0e       	add	r4, r31
    1e6e:	51 1c       	adc	r5, r1
    1e70:	f8 01       	movw	r30, r16
    1e72:	a0 80       	ld	r10, Z
    1e74:	b1 80       	ldd	r11, Z+1	; 0x01
    1e76:	36 fe       	sbrs	r3, 6
    1e78:	03 c0       	rjmp	.+6      	; 0x1e80 <vfprintf+0x146>
    1e7a:	69 2d       	mov	r22, r9
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <vfprintf+0x14a>
    1e80:	6f ef       	ldi	r22, 0xFF	; 255
    1e82:	7f ef       	ldi	r23, 0xFF	; 255
    1e84:	c5 01       	movw	r24, r10
    1e86:	0e 94 bb 12 	call	0x2576	; 0x2576 <strnlen>
    1e8a:	4c 01       	movw	r8, r24
    1e8c:	82 01       	movw	r16, r4
    1e8e:	f3 2d       	mov	r31, r3
    1e90:	ff 77       	andi	r31, 0x7F	; 127
    1e92:	3f 2e       	mov	r3, r31
    1e94:	16 c0       	rjmp	.+44     	; 0x1ec2 <vfprintf+0x188>
    1e96:	28 01       	movw	r4, r16
    1e98:	22 e0       	ldi	r18, 0x02	; 2
    1e9a:	42 0e       	add	r4, r18
    1e9c:	51 1c       	adc	r5, r1
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	a0 80       	ld	r10, Z
    1ea2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ea4:	36 fe       	sbrs	r3, 6
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <vfprintf+0x174>
    1ea8:	69 2d       	mov	r22, r9
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <vfprintf+0x178>
    1eae:	6f ef       	ldi	r22, 0xFF	; 255
    1eb0:	7f ef       	ldi	r23, 0xFF	; 255
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	0e 94 b0 12 	call	0x2560	; 0x2560 <strnlen_P>
    1eb8:	4c 01       	movw	r8, r24
    1eba:	f3 2d       	mov	r31, r3
    1ebc:	f0 68       	ori	r31, 0x80	; 128
    1ebe:	3f 2e       	mov	r3, r31
    1ec0:	82 01       	movw	r16, r4
    1ec2:	33 fc       	sbrc	r3, 3
    1ec4:	1b c0       	rjmp	.+54     	; 0x1efc <vfprintf+0x1c2>
    1ec6:	82 2d       	mov	r24, r2
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	88 16       	cp	r8, r24
    1ecc:	99 06       	cpc	r9, r25
    1ece:	b0 f4       	brcc	.+44     	; 0x1efc <vfprintf+0x1c2>
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	80 e2       	ldi	r24, 0x20	; 32
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    1eda:	2a 94       	dec	r2
    1edc:	f4 cf       	rjmp	.-24     	; 0x1ec6 <vfprintf+0x18c>
    1ede:	f5 01       	movw	r30, r10
    1ee0:	37 fc       	sbrc	r3, 7
    1ee2:	85 91       	lpm	r24, Z+
    1ee4:	37 fe       	sbrs	r3, 7
    1ee6:	81 91       	ld	r24, Z+
    1ee8:	5f 01       	movw	r10, r30
    1eea:	b6 01       	movw	r22, r12
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    1ef2:	21 10       	cpse	r2, r1
    1ef4:	2a 94       	dec	r2
    1ef6:	21 e0       	ldi	r18, 0x01	; 1
    1ef8:	82 1a       	sub	r8, r18
    1efa:	91 08       	sbc	r9, r1
    1efc:	81 14       	cp	r8, r1
    1efe:	91 04       	cpc	r9, r1
    1f00:	71 f7       	brne	.-36     	; 0x1ede <vfprintf+0x1a4>
    1f02:	e8 c0       	rjmp	.+464    	; 0x20d4 <vfprintf+0x39a>
    1f04:	84 36       	cpi	r24, 0x64	; 100
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <vfprintf+0x1d2>
    1f08:	89 36       	cpi	r24, 0x69	; 105
    1f0a:	41 f5       	brne	.+80     	; 0x1f5c <vfprintf+0x222>
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	37 fe       	sbrs	r3, 7
    1f10:	07 c0       	rjmp	.+14     	; 0x1f20 <vfprintf+0x1e6>
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	0c 5f       	subi	r16, 0xFC	; 252
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	08 c0       	rjmp	.+16     	; 0x1f30 <vfprintf+0x1f6>
    1f20:	60 81       	ld	r22, Z
    1f22:	71 81       	ldd	r23, Z+1	; 0x01
    1f24:	07 2e       	mov	r0, r23
    1f26:	00 0c       	add	r0, r0
    1f28:	88 0b       	sbc	r24, r24
    1f2a:	99 0b       	sbc	r25, r25
    1f2c:	0e 5f       	subi	r16, 0xFE	; 254
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	f3 2d       	mov	r31, r3
    1f32:	ff 76       	andi	r31, 0x6F	; 111
    1f34:	3f 2e       	mov	r3, r31
    1f36:	97 ff       	sbrs	r25, 7
    1f38:	09 c0       	rjmp	.+18     	; 0x1f4c <vfprintf+0x212>
    1f3a:	90 95       	com	r25
    1f3c:	80 95       	com	r24
    1f3e:	70 95       	com	r23
    1f40:	61 95       	neg	r22
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	8f 4f       	sbci	r24, 0xFF	; 255
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	f0 68       	ori	r31, 0x80	; 128
    1f4a:	3f 2e       	mov	r3, r31
    1f4c:	2a e0       	ldi	r18, 0x0A	; 10
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	a3 01       	movw	r20, r6
    1f52:	0e 94 02 13 	call	0x2604	; 0x2604 <__ultoa_invert>
    1f56:	88 2e       	mov	r8, r24
    1f58:	86 18       	sub	r8, r6
    1f5a:	45 c0       	rjmp	.+138    	; 0x1fe6 <vfprintf+0x2ac>
    1f5c:	85 37       	cpi	r24, 0x75	; 117
    1f5e:	31 f4       	brne	.+12     	; 0x1f6c <vfprintf+0x232>
    1f60:	23 2d       	mov	r18, r3
    1f62:	2f 7e       	andi	r18, 0xEF	; 239
    1f64:	b2 2e       	mov	r11, r18
    1f66:	2a e0       	ldi	r18, 0x0A	; 10
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	25 c0       	rjmp	.+74     	; 0x1fb6 <vfprintf+0x27c>
    1f6c:	93 2d       	mov	r25, r3
    1f6e:	99 7f       	andi	r25, 0xF9	; 249
    1f70:	b9 2e       	mov	r11, r25
    1f72:	8f 36       	cpi	r24, 0x6F	; 111
    1f74:	c1 f0       	breq	.+48     	; 0x1fa6 <vfprintf+0x26c>
    1f76:	18 f4       	brcc	.+6      	; 0x1f7e <vfprintf+0x244>
    1f78:	88 35       	cpi	r24, 0x58	; 88
    1f7a:	79 f0       	breq	.+30     	; 0x1f9a <vfprintf+0x260>
    1f7c:	b5 c0       	rjmp	.+362    	; 0x20e8 <vfprintf+0x3ae>
    1f7e:	80 37       	cpi	r24, 0x70	; 112
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <vfprintf+0x24e>
    1f82:	88 37       	cpi	r24, 0x78	; 120
    1f84:	21 f0       	breq	.+8      	; 0x1f8e <vfprintf+0x254>
    1f86:	b0 c0       	rjmp	.+352    	; 0x20e8 <vfprintf+0x3ae>
    1f88:	e9 2f       	mov	r30, r25
    1f8a:	e0 61       	ori	r30, 0x10	; 16
    1f8c:	be 2e       	mov	r11, r30
    1f8e:	b4 fe       	sbrs	r11, 4
    1f90:	0d c0       	rjmp	.+26     	; 0x1fac <vfprintf+0x272>
    1f92:	fb 2d       	mov	r31, r11
    1f94:	f4 60       	ori	r31, 0x04	; 4
    1f96:	bf 2e       	mov	r11, r31
    1f98:	09 c0       	rjmp	.+18     	; 0x1fac <vfprintf+0x272>
    1f9a:	34 fe       	sbrs	r3, 4
    1f9c:	0a c0       	rjmp	.+20     	; 0x1fb2 <vfprintf+0x278>
    1f9e:	29 2f       	mov	r18, r25
    1fa0:	26 60       	ori	r18, 0x06	; 6
    1fa2:	b2 2e       	mov	r11, r18
    1fa4:	06 c0       	rjmp	.+12     	; 0x1fb2 <vfprintf+0x278>
    1fa6:	28 e0       	ldi	r18, 0x08	; 8
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <vfprintf+0x27c>
    1fac:	20 e1       	ldi	r18, 0x10	; 16
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <vfprintf+0x27c>
    1fb2:	20 e1       	ldi	r18, 0x10	; 16
    1fb4:	32 e0       	ldi	r19, 0x02	; 2
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	b7 fe       	sbrs	r11, 7
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <vfprintf+0x290>
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	0c 5f       	subi	r16, 0xFC	; 252
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <vfprintf+0x29c>
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0e 5f       	subi	r16, 0xFE	; 254
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	a3 01       	movw	r20, r6
    1fd8:	0e 94 02 13 	call	0x2604	; 0x2604 <__ultoa_invert>
    1fdc:	88 2e       	mov	r8, r24
    1fde:	86 18       	sub	r8, r6
    1fe0:	fb 2d       	mov	r31, r11
    1fe2:	ff 77       	andi	r31, 0x7F	; 127
    1fe4:	3f 2e       	mov	r3, r31
    1fe6:	36 fe       	sbrs	r3, 6
    1fe8:	0d c0       	rjmp	.+26     	; 0x2004 <vfprintf+0x2ca>
    1fea:	23 2d       	mov	r18, r3
    1fec:	2e 7f       	andi	r18, 0xFE	; 254
    1fee:	a2 2e       	mov	r10, r18
    1ff0:	89 14       	cp	r8, r9
    1ff2:	58 f4       	brcc	.+22     	; 0x200a <vfprintf+0x2d0>
    1ff4:	34 fe       	sbrs	r3, 4
    1ff6:	0b c0       	rjmp	.+22     	; 0x200e <vfprintf+0x2d4>
    1ff8:	32 fc       	sbrc	r3, 2
    1ffa:	09 c0       	rjmp	.+18     	; 0x200e <vfprintf+0x2d4>
    1ffc:	83 2d       	mov	r24, r3
    1ffe:	8e 7e       	andi	r24, 0xEE	; 238
    2000:	a8 2e       	mov	r10, r24
    2002:	05 c0       	rjmp	.+10     	; 0x200e <vfprintf+0x2d4>
    2004:	b8 2c       	mov	r11, r8
    2006:	a3 2c       	mov	r10, r3
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <vfprintf+0x2d6>
    200a:	b8 2c       	mov	r11, r8
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <vfprintf+0x2d6>
    200e:	b9 2c       	mov	r11, r9
    2010:	a4 fe       	sbrs	r10, 4
    2012:	0f c0       	rjmp	.+30     	; 0x2032 <vfprintf+0x2f8>
    2014:	fe 01       	movw	r30, r28
    2016:	e8 0d       	add	r30, r8
    2018:	f1 1d       	adc	r31, r1
    201a:	80 81       	ld	r24, Z
    201c:	80 33       	cpi	r24, 0x30	; 48
    201e:	21 f4       	brne	.+8      	; 0x2028 <vfprintf+0x2ee>
    2020:	9a 2d       	mov	r25, r10
    2022:	99 7e       	andi	r25, 0xE9	; 233
    2024:	a9 2e       	mov	r10, r25
    2026:	09 c0       	rjmp	.+18     	; 0x203a <vfprintf+0x300>
    2028:	a2 fe       	sbrs	r10, 2
    202a:	06 c0       	rjmp	.+12     	; 0x2038 <vfprintf+0x2fe>
    202c:	b3 94       	inc	r11
    202e:	b3 94       	inc	r11
    2030:	04 c0       	rjmp	.+8      	; 0x203a <vfprintf+0x300>
    2032:	8a 2d       	mov	r24, r10
    2034:	86 78       	andi	r24, 0x86	; 134
    2036:	09 f0       	breq	.+2      	; 0x203a <vfprintf+0x300>
    2038:	b3 94       	inc	r11
    203a:	a3 fc       	sbrc	r10, 3
    203c:	11 c0       	rjmp	.+34     	; 0x2060 <vfprintf+0x326>
    203e:	a0 fe       	sbrs	r10, 0
    2040:	06 c0       	rjmp	.+12     	; 0x204e <vfprintf+0x314>
    2042:	b2 14       	cp	r11, r2
    2044:	88 f4       	brcc	.+34     	; 0x2068 <vfprintf+0x32e>
    2046:	28 0c       	add	r2, r8
    2048:	92 2c       	mov	r9, r2
    204a:	9b 18       	sub	r9, r11
    204c:	0e c0       	rjmp	.+28     	; 0x206a <vfprintf+0x330>
    204e:	b2 14       	cp	r11, r2
    2050:	60 f4       	brcc	.+24     	; 0x206a <vfprintf+0x330>
    2052:	b6 01       	movw	r22, r12
    2054:	80 e2       	ldi	r24, 0x20	; 32
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    205c:	b3 94       	inc	r11
    205e:	f7 cf       	rjmp	.-18     	; 0x204e <vfprintf+0x314>
    2060:	b2 14       	cp	r11, r2
    2062:	18 f4       	brcc	.+6      	; 0x206a <vfprintf+0x330>
    2064:	2b 18       	sub	r2, r11
    2066:	02 c0       	rjmp	.+4      	; 0x206c <vfprintf+0x332>
    2068:	98 2c       	mov	r9, r8
    206a:	21 2c       	mov	r2, r1
    206c:	a4 fe       	sbrs	r10, 4
    206e:	10 c0       	rjmp	.+32     	; 0x2090 <vfprintf+0x356>
    2070:	b6 01       	movw	r22, r12
    2072:	80 e3       	ldi	r24, 0x30	; 48
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    207a:	a2 fe       	sbrs	r10, 2
    207c:	17 c0       	rjmp	.+46     	; 0x20ac <vfprintf+0x372>
    207e:	a1 fc       	sbrc	r10, 1
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <vfprintf+0x34e>
    2082:	88 e7       	ldi	r24, 0x78	; 120
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 c0       	rjmp	.+4      	; 0x208c <vfprintf+0x352>
    2088:	88 e5       	ldi	r24, 0x58	; 88
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	b6 01       	movw	r22, r12
    208e:	0c c0       	rjmp	.+24     	; 0x20a8 <vfprintf+0x36e>
    2090:	8a 2d       	mov	r24, r10
    2092:	86 78       	andi	r24, 0x86	; 134
    2094:	59 f0       	breq	.+22     	; 0x20ac <vfprintf+0x372>
    2096:	a1 fe       	sbrs	r10, 1
    2098:	02 c0       	rjmp	.+4      	; 0x209e <vfprintf+0x364>
    209a:	8b e2       	ldi	r24, 0x2B	; 43
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <vfprintf+0x366>
    209e:	80 e2       	ldi	r24, 0x20	; 32
    20a0:	a7 fc       	sbrc	r10, 7
    20a2:	8d e2       	ldi	r24, 0x2D	; 45
    20a4:	b6 01       	movw	r22, r12
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    20ac:	89 14       	cp	r8, r9
    20ae:	38 f4       	brcc	.+14     	; 0x20be <vfprintf+0x384>
    20b0:	b6 01       	movw	r22, r12
    20b2:	80 e3       	ldi	r24, 0x30	; 48
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    20ba:	9a 94       	dec	r9
    20bc:	f7 cf       	rjmp	.-18     	; 0x20ac <vfprintf+0x372>
    20be:	8a 94       	dec	r8
    20c0:	f3 01       	movw	r30, r6
    20c2:	e8 0d       	add	r30, r8
    20c4:	f1 1d       	adc	r31, r1
    20c6:	80 81       	ld	r24, Z
    20c8:	b6 01       	movw	r22, r12
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    20d0:	81 10       	cpse	r8, r1
    20d2:	f5 cf       	rjmp	.-22     	; 0x20be <vfprintf+0x384>
    20d4:	22 20       	and	r2, r2
    20d6:	09 f4       	brne	.+2      	; 0x20da <vfprintf+0x3a0>
    20d8:	42 ce       	rjmp	.-892    	; 0x1d5e <vfprintf+0x24>
    20da:	b6 01       	movw	r22, r12
    20dc:	80 e2       	ldi	r24, 0x20	; 32
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 c6 12 	call	0x258c	; 0x258c <fputc>
    20e4:	2a 94       	dec	r2
    20e6:	f6 cf       	rjmp	.-20     	; 0x20d4 <vfprintf+0x39a>
    20e8:	f6 01       	movw	r30, r12
    20ea:	86 81       	ldd	r24, Z+6	; 0x06
    20ec:	97 81       	ldd	r25, Z+7	; 0x07
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <vfprintf+0x3ba>
    20f0:	8f ef       	ldi	r24, 0xFF	; 255
    20f2:	9f ef       	ldi	r25, 0xFF	; 255
    20f4:	2b 96       	adiw	r28, 0x0b	; 11
    20f6:	e2 e1       	ldi	r30, 0x12	; 18
    20f8:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__>

000020fc <dtoa_prf>:
    20fc:	a9 e0       	ldi	r26, 0x09	; 9
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e4 e8       	ldi	r30, 0x84	; 132
    2102:	f0 e1       	ldi	r31, 0x10	; 16
    2104:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0xc>
    2108:	6a 01       	movw	r12, r20
    210a:	12 2f       	mov	r17, r18
    210c:	b0 2e       	mov	r11, r16
    210e:	2b e3       	ldi	r18, 0x3B	; 59
    2110:	20 17       	cp	r18, r16
    2112:	20 f0       	brcs	.+8      	; 0x211c <dtoa_prf+0x20>
    2114:	ff 24       	eor	r15, r15
    2116:	f3 94       	inc	r15
    2118:	f0 0e       	add	r15, r16
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <dtoa_prf+0x24>
    211c:	2c e3       	ldi	r18, 0x3C	; 60
    211e:	f2 2e       	mov	r15, r18
    2120:	0f 2d       	mov	r16, r15
    2122:	27 e0       	ldi	r18, 0x07	; 7
    2124:	ae 01       	movw	r20, r28
    2126:	4f 5f       	subi	r20, 0xFF	; 255
    2128:	5f 4f       	sbci	r21, 0xFF	; 255
    212a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__ftoa_engine>
    212e:	bc 01       	movw	r22, r24
    2130:	49 81       	ldd	r20, Y+1	; 0x01
    2132:	84 2f       	mov	r24, r20
    2134:	89 70       	andi	r24, 0x09	; 9
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	31 f0       	breq	.+12     	; 0x2146 <dtoa_prf+0x4a>
    213a:	e1 fc       	sbrc	r14, 1
    213c:	06 c0       	rjmp	.+12     	; 0x214a <dtoa_prf+0x4e>
    213e:	e0 fe       	sbrs	r14, 0
    2140:	06 c0       	rjmp	.+12     	; 0x214e <dtoa_prf+0x52>
    2142:	90 e2       	ldi	r25, 0x20	; 32
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <dtoa_prf+0x54>
    2146:	9d e2       	ldi	r25, 0x2D	; 45
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <dtoa_prf+0x54>
    214a:	9b e2       	ldi	r25, 0x2B	; 43
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <dtoa_prf+0x54>
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	5e 2d       	mov	r21, r14
    2152:	50 71       	andi	r21, 0x10	; 16
    2154:	43 ff       	sbrs	r20, 3
    2156:	3c c0       	rjmp	.+120    	; 0x21d0 <dtoa_prf+0xd4>
    2158:	91 11       	cpse	r25, r1
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <dtoa_prf+0x64>
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	01 c0       	rjmp	.+2      	; 0x2162 <dtoa_prf+0x66>
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	81 17       	cp	r24, r17
    2164:	18 f4       	brcc	.+6      	; 0x216c <dtoa_prf+0x70>
    2166:	21 2f       	mov	r18, r17
    2168:	28 1b       	sub	r18, r24
    216a:	01 c0       	rjmp	.+2      	; 0x216e <dtoa_prf+0x72>
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	51 11       	cpse	r21, r1
    2170:	0b c0       	rjmp	.+22     	; 0x2188 <dtoa_prf+0x8c>
    2172:	f6 01       	movw	r30, r12
    2174:	82 2f       	mov	r24, r18
    2176:	30 e2       	ldi	r19, 0x20	; 32
    2178:	88 23       	and	r24, r24
    217a:	19 f0       	breq	.+6      	; 0x2182 <dtoa_prf+0x86>
    217c:	31 93       	st	Z+, r19
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	fb cf       	rjmp	.-10     	; 0x2178 <dtoa_prf+0x7c>
    2182:	c2 0e       	add	r12, r18
    2184:	d1 1c       	adc	r13, r1
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	99 23       	and	r25, r25
    218a:	29 f0       	breq	.+10     	; 0x2196 <dtoa_prf+0x9a>
    218c:	d6 01       	movw	r26, r12
    218e:	9c 93       	st	X, r25
    2190:	f6 01       	movw	r30, r12
    2192:	31 96       	adiw	r30, 0x01	; 1
    2194:	6f 01       	movw	r12, r30
    2196:	c6 01       	movw	r24, r12
    2198:	03 96       	adiw	r24, 0x03	; 3
    219a:	e2 fe       	sbrs	r14, 2
    219c:	0a c0       	rjmp	.+20     	; 0x21b2 <dtoa_prf+0xb6>
    219e:	3e e4       	ldi	r19, 0x4E	; 78
    21a0:	d6 01       	movw	r26, r12
    21a2:	3c 93       	st	X, r19
    21a4:	41 e4       	ldi	r20, 0x41	; 65
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	4c 93       	st	X, r20
    21aa:	11 97       	sbiw	r26, 0x01	; 1
    21ac:	12 96       	adiw	r26, 0x02	; 2
    21ae:	3c 93       	st	X, r19
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <dtoa_prf+0xc2>
    21b2:	3e e6       	ldi	r19, 0x6E	; 110
    21b4:	f6 01       	movw	r30, r12
    21b6:	30 83       	st	Z, r19
    21b8:	41 e6       	ldi	r20, 0x61	; 97
    21ba:	41 83       	std	Z+1, r20	; 0x01
    21bc:	32 83       	std	Z+2, r19	; 0x02
    21be:	fc 01       	movw	r30, r24
    21c0:	32 2f       	mov	r19, r18
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	33 23       	and	r19, r19
    21c6:	09 f4       	brne	.+2      	; 0x21ca <dtoa_prf+0xce>
    21c8:	42 c0       	rjmp	.+132    	; 0x224e <dtoa_prf+0x152>
    21ca:	41 93       	st	Z+, r20
    21cc:	31 50       	subi	r19, 0x01	; 1
    21ce:	fa cf       	rjmp	.-12     	; 0x21c4 <dtoa_prf+0xc8>
    21d0:	42 ff       	sbrs	r20, 2
    21d2:	44 c0       	rjmp	.+136    	; 0x225c <dtoa_prf+0x160>
    21d4:	91 11       	cpse	r25, r1
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <dtoa_prf+0xe0>
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	01 c0       	rjmp	.+2      	; 0x21de <dtoa_prf+0xe2>
    21dc:	84 e0       	ldi	r24, 0x04	; 4
    21de:	81 17       	cp	r24, r17
    21e0:	18 f4       	brcc	.+6      	; 0x21e8 <dtoa_prf+0xec>
    21e2:	21 2f       	mov	r18, r17
    21e4:	28 1b       	sub	r18, r24
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <dtoa_prf+0xee>
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	51 11       	cpse	r21, r1
    21ec:	0b c0       	rjmp	.+22     	; 0x2204 <dtoa_prf+0x108>
    21ee:	f6 01       	movw	r30, r12
    21f0:	82 2f       	mov	r24, r18
    21f2:	30 e2       	ldi	r19, 0x20	; 32
    21f4:	88 23       	and	r24, r24
    21f6:	19 f0       	breq	.+6      	; 0x21fe <dtoa_prf+0x102>
    21f8:	31 93       	st	Z+, r19
    21fa:	81 50       	subi	r24, 0x01	; 1
    21fc:	fb cf       	rjmp	.-10     	; 0x21f4 <dtoa_prf+0xf8>
    21fe:	c2 0e       	add	r12, r18
    2200:	d1 1c       	adc	r13, r1
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	99 23       	and	r25, r25
    2206:	29 f0       	breq	.+10     	; 0x2212 <dtoa_prf+0x116>
    2208:	d6 01       	movw	r26, r12
    220a:	9c 93       	st	X, r25
    220c:	f6 01       	movw	r30, r12
    220e:	31 96       	adiw	r30, 0x01	; 1
    2210:	6f 01       	movw	r12, r30
    2212:	c6 01       	movw	r24, r12
    2214:	03 96       	adiw	r24, 0x03	; 3
    2216:	e2 fe       	sbrs	r14, 2
    2218:	0b c0       	rjmp	.+22     	; 0x2230 <dtoa_prf+0x134>
    221a:	39 e4       	ldi	r19, 0x49	; 73
    221c:	d6 01       	movw	r26, r12
    221e:	3c 93       	st	X, r19
    2220:	3e e4       	ldi	r19, 0x4E	; 78
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	3c 93       	st	X, r19
    2226:	11 97       	sbiw	r26, 0x01	; 1
    2228:	36 e4       	ldi	r19, 0x46	; 70
    222a:	12 96       	adiw	r26, 0x02	; 2
    222c:	3c 93       	st	X, r19
    222e:	07 c0       	rjmp	.+14     	; 0x223e <dtoa_prf+0x142>
    2230:	39 e6       	ldi	r19, 0x69	; 105
    2232:	f6 01       	movw	r30, r12
    2234:	30 83       	st	Z, r19
    2236:	3e e6       	ldi	r19, 0x6E	; 110
    2238:	31 83       	std	Z+1, r19	; 0x01
    223a:	36 e6       	ldi	r19, 0x66	; 102
    223c:	32 83       	std	Z+2, r19	; 0x02
    223e:	fc 01       	movw	r30, r24
    2240:	32 2f       	mov	r19, r18
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	33 23       	and	r19, r19
    2246:	19 f0       	breq	.+6      	; 0x224e <dtoa_prf+0x152>
    2248:	41 93       	st	Z+, r20
    224a:	31 50       	subi	r19, 0x01	; 1
    224c:	fb cf       	rjmp	.-10     	; 0x2244 <dtoa_prf+0x148>
    224e:	fc 01       	movw	r30, r24
    2250:	e2 0f       	add	r30, r18
    2252:	f1 1d       	adc	r31, r1
    2254:	10 82       	st	Z, r1
    2256:	8e ef       	ldi	r24, 0xFE	; 254
    2258:	9f ef       	ldi	r25, 0xFF	; 255
    225a:	a6 c0       	rjmp	.+332    	; 0x23a8 <dtoa_prf+0x2ac>
    225c:	21 e0       	ldi	r18, 0x01	; 1
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	91 11       	cpse	r25, r1
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <dtoa_prf+0x16c>
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	16 16       	cp	r1, r22
    226a:	17 06       	cpc	r1, r23
    226c:	1c f4       	brge	.+6      	; 0x2274 <dtoa_prf+0x178>
    226e:	fb 01       	movw	r30, r22
    2270:	31 96       	adiw	r30, 0x01	; 1
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <dtoa_prf+0x17c>
    2274:	e1 e0       	ldi	r30, 0x01	; 1
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	2e 0f       	add	r18, r30
    227a:	3f 1f       	adc	r19, r31
    227c:	bb 20       	and	r11, r11
    227e:	21 f0       	breq	.+8      	; 0x2288 <dtoa_prf+0x18c>
    2280:	eb 2d       	mov	r30, r11
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	31 96       	adiw	r30, 0x01	; 1
    2286:	02 c0       	rjmp	.+4      	; 0x228c <dtoa_prf+0x190>
    2288:	e0 e0       	ldi	r30, 0x00	; 0
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	2e 0f       	add	r18, r30
    228e:	3f 1f       	adc	r19, r31
    2290:	e1 2f       	mov	r30, r17
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	2e 17       	cp	r18, r30
    2296:	3f 07       	cpc	r19, r31
    2298:	1c f4       	brge	.+6      	; 0x22a0 <dtoa_prf+0x1a4>
    229a:	12 1b       	sub	r17, r18
    229c:	21 2f       	mov	r18, r17
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <dtoa_prf+0x1a6>
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	8e 2d       	mov	r24, r14
    22a4:	88 71       	andi	r24, 0x18	; 24
    22a6:	59 f4       	brne	.+22     	; 0x22be <dtoa_prf+0x1c2>
    22a8:	f6 01       	movw	r30, r12
    22aa:	82 2f       	mov	r24, r18
    22ac:	30 e2       	ldi	r19, 0x20	; 32
    22ae:	88 23       	and	r24, r24
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <dtoa_prf+0x1bc>
    22b2:	31 93       	st	Z+, r19
    22b4:	81 50       	subi	r24, 0x01	; 1
    22b6:	fb cf       	rjmp	.-10     	; 0x22ae <dtoa_prf+0x1b2>
    22b8:	c2 0e       	add	r12, r18
    22ba:	d1 1c       	adc	r13, r1
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	99 23       	and	r25, r25
    22c0:	29 f0       	breq	.+10     	; 0x22cc <dtoa_prf+0x1d0>
    22c2:	d6 01       	movw	r26, r12
    22c4:	9c 93       	st	X, r25
    22c6:	f6 01       	movw	r30, r12
    22c8:	31 96       	adiw	r30, 0x01	; 1
    22ca:	6f 01       	movw	r12, r30
    22cc:	51 11       	cpse	r21, r1
    22ce:	0b c0       	rjmp	.+22     	; 0x22e6 <dtoa_prf+0x1ea>
    22d0:	f6 01       	movw	r30, r12
    22d2:	82 2f       	mov	r24, r18
    22d4:	90 e3       	ldi	r25, 0x30	; 48
    22d6:	88 23       	and	r24, r24
    22d8:	19 f0       	breq	.+6      	; 0x22e0 <dtoa_prf+0x1e4>
    22da:	91 93       	st	Z+, r25
    22dc:	81 50       	subi	r24, 0x01	; 1
    22de:	fb cf       	rjmp	.-10     	; 0x22d6 <dtoa_prf+0x1da>
    22e0:	c2 0e       	add	r12, r18
    22e2:	d1 1c       	adc	r13, r1
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	0f 2d       	mov	r16, r15
    22e8:	06 0f       	add	r16, r22
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	34 2f       	mov	r19, r20
    22ee:	30 71       	andi	r19, 0x10	; 16
    22f0:	44 ff       	sbrs	r20, 4
    22f2:	03 c0       	rjmp	.+6      	; 0x22fa <dtoa_prf+0x1fe>
    22f4:	91 33       	cpi	r25, 0x31	; 49
    22f6:	09 f4       	brne	.+2      	; 0x22fa <dtoa_prf+0x1fe>
    22f8:	01 50       	subi	r16, 0x01	; 1
    22fa:	10 16       	cp	r1, r16
    22fc:	24 f4       	brge	.+8      	; 0x2306 <dtoa_prf+0x20a>
    22fe:	09 30       	cpi	r16, 0x09	; 9
    2300:	18 f0       	brcs	.+6      	; 0x2308 <dtoa_prf+0x20c>
    2302:	08 e0       	ldi	r16, 0x08	; 8
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <dtoa_prf+0x20c>
    2306:	01 e0       	ldi	r16, 0x01	; 1
    2308:	ab 01       	movw	r20, r22
    230a:	77 ff       	sbrs	r23, 7
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <dtoa_prf+0x216>
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	fb 01       	movw	r30, r22
    2314:	e4 1b       	sub	r30, r20
    2316:	f5 0b       	sbc	r31, r21
    2318:	a1 e0       	ldi	r26, 0x01	; 1
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ac 0f       	add	r26, r28
    231e:	bd 1f       	adc	r27, r29
    2320:	ea 0f       	add	r30, r26
    2322:	fb 1f       	adc	r31, r27
    2324:	8e e2       	ldi	r24, 0x2E	; 46
    2326:	a8 2e       	mov	r10, r24
    2328:	4b 01       	movw	r8, r22
    232a:	80 1a       	sub	r8, r16
    232c:	91 08       	sbc	r9, r1
    232e:	0b 2d       	mov	r16, r11
    2330:	10 e0       	ldi	r17, 0x00	; 0
    2332:	11 95       	neg	r17
    2334:	01 95       	neg	r16
    2336:	11 09       	sbc	r17, r1
    2338:	4f 3f       	cpi	r20, 0xFF	; 255
    233a:	bf ef       	ldi	r27, 0xFF	; 255
    233c:	5b 07       	cpc	r21, r27
    233e:	21 f4       	brne	.+8      	; 0x2348 <dtoa_prf+0x24c>
    2340:	d6 01       	movw	r26, r12
    2342:	ac 92       	st	X, r10
    2344:	11 96       	adiw	r26, 0x01	; 1
    2346:	6d 01       	movw	r12, r26
    2348:	64 17       	cp	r22, r20
    234a:	75 07       	cpc	r23, r21
    234c:	2c f0       	brlt	.+10     	; 0x2358 <dtoa_prf+0x25c>
    234e:	84 16       	cp	r8, r20
    2350:	95 06       	cpc	r9, r21
    2352:	14 f4       	brge	.+4      	; 0x2358 <dtoa_prf+0x25c>
    2354:	81 81       	ldd	r24, Z+1	; 0x01
    2356:	01 c0       	rjmp	.+2      	; 0x235a <dtoa_prf+0x25e>
    2358:	80 e3       	ldi	r24, 0x30	; 48
    235a:	41 50       	subi	r20, 0x01	; 1
    235c:	51 09       	sbc	r21, r1
    235e:	31 96       	adiw	r30, 0x01	; 1
    2360:	d6 01       	movw	r26, r12
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	7d 01       	movw	r14, r26
    2366:	40 17       	cp	r20, r16
    2368:	51 07       	cpc	r21, r17
    236a:	24 f0       	brlt	.+8      	; 0x2374 <dtoa_prf+0x278>
    236c:	d6 01       	movw	r26, r12
    236e:	8c 93       	st	X, r24
    2370:	67 01       	movw	r12, r14
    2372:	e2 cf       	rjmp	.-60     	; 0x2338 <dtoa_prf+0x23c>
    2374:	64 17       	cp	r22, r20
    2376:	75 07       	cpc	r23, r21
    2378:	39 f4       	brne	.+14     	; 0x2388 <dtoa_prf+0x28c>
    237a:	96 33       	cpi	r25, 0x36	; 54
    237c:	20 f4       	brcc	.+8      	; 0x2386 <dtoa_prf+0x28a>
    237e:	95 33       	cpi	r25, 0x35	; 53
    2380:	19 f4       	brne	.+6      	; 0x2388 <dtoa_prf+0x28c>
    2382:	31 11       	cpse	r19, r1
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <dtoa_prf+0x28c>
    2386:	81 e3       	ldi	r24, 0x31	; 49
    2388:	f6 01       	movw	r30, r12
    238a:	80 83       	st	Z, r24
    238c:	f7 01       	movw	r30, r14
    238e:	82 2f       	mov	r24, r18
    2390:	90 e2       	ldi	r25, 0x20	; 32
    2392:	88 23       	and	r24, r24
    2394:	19 f0       	breq	.+6      	; 0x239c <dtoa_prf+0x2a0>
    2396:	91 93       	st	Z+, r25
    2398:	81 50       	subi	r24, 0x01	; 1
    239a:	fb cf       	rjmp	.-10     	; 0x2392 <dtoa_prf+0x296>
    239c:	f7 01       	movw	r30, r14
    239e:	e2 0f       	add	r30, r18
    23a0:	f1 1d       	adc	r31, r1
    23a2:	10 82       	st	Z, r1
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	29 96       	adiw	r28, 0x09	; 9
    23aa:	ec e0       	ldi	r30, 0x0C	; 12
    23ac:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0xc>

000023b0 <__ftoa_engine>:
    23b0:	28 30       	cpi	r18, 0x08	; 8
    23b2:	08 f0       	brcs	.+2      	; 0x23b6 <__ftoa_engine+0x6>
    23b4:	27 e0       	ldi	r18, 0x07	; 7
    23b6:	33 27       	eor	r19, r19
    23b8:	da 01       	movw	r26, r20
    23ba:	99 0f       	add	r25, r25
    23bc:	31 1d       	adc	r19, r1
    23be:	87 fd       	sbrc	r24, 7
    23c0:	91 60       	ori	r25, 0x01	; 1
    23c2:	00 96       	adiw	r24, 0x00	; 0
    23c4:	61 05       	cpc	r22, r1
    23c6:	71 05       	cpc	r23, r1
    23c8:	39 f4       	brne	.+14     	; 0x23d8 <__ftoa_engine+0x28>
    23ca:	32 60       	ori	r19, 0x02	; 2
    23cc:	2e 5f       	subi	r18, 0xFE	; 254
    23ce:	3d 93       	st	X+, r19
    23d0:	30 e3       	ldi	r19, 0x30	; 48
    23d2:	2a 95       	dec	r18
    23d4:	e1 f7       	brne	.-8      	; 0x23ce <__ftoa_engine+0x1e>
    23d6:	08 95       	ret
    23d8:	9f 3f       	cpi	r25, 0xFF	; 255
    23da:	30 f0       	brcs	.+12     	; 0x23e8 <__ftoa_engine+0x38>
    23dc:	80 38       	cpi	r24, 0x80	; 128
    23de:	71 05       	cpc	r23, r1
    23e0:	61 05       	cpc	r22, r1
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <__ftoa_engine+0x36>
    23e4:	3c 5f       	subi	r19, 0xFC	; 252
    23e6:	3c 5f       	subi	r19, 0xFC	; 252
    23e8:	3d 93       	st	X+, r19
    23ea:	91 30       	cpi	r25, 0x01	; 1
    23ec:	08 f0       	brcs	.+2      	; 0x23f0 <__ftoa_engine+0x40>
    23ee:	80 68       	ori	r24, 0x80	; 128
    23f0:	91 1d       	adc	r25, r1
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	1f 93       	push	r17
    23f8:	0f 93       	push	r16
    23fa:	ff 92       	push	r15
    23fc:	ef 92       	push	r14
    23fe:	19 2f       	mov	r17, r25
    2400:	98 7f       	andi	r25, 0xF8	; 248
    2402:	96 95       	lsr	r25
    2404:	e9 2f       	mov	r30, r25
    2406:	96 95       	lsr	r25
    2408:	96 95       	lsr	r25
    240a:	e9 0f       	add	r30, r25
    240c:	ff 27       	eor	r31, r31
    240e:	e4 52       	subi	r30, 0x24	; 36
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	99 27       	eor	r25, r25
    2414:	33 27       	eor	r19, r19
    2416:	ee 24       	eor	r14, r14
    2418:	ff 24       	eor	r15, r15
    241a:	a7 01       	movw	r20, r14
    241c:	e7 01       	movw	r28, r14
    241e:	05 90       	lpm	r0, Z+
    2420:	08 94       	sec
    2422:	07 94       	ror	r0
    2424:	28 f4       	brcc	.+10     	; 0x2430 <__ftoa_engine+0x80>
    2426:	36 0f       	add	r19, r22
    2428:	e7 1e       	adc	r14, r23
    242a:	f8 1e       	adc	r15, r24
    242c:	49 1f       	adc	r20, r25
    242e:	51 1d       	adc	r21, r1
    2430:	66 0f       	add	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	88 1f       	adc	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	06 94       	lsr	r0
    243a:	a1 f7       	brne	.-24     	; 0x2424 <__ftoa_engine+0x74>
    243c:	05 90       	lpm	r0, Z+
    243e:	07 94       	ror	r0
    2440:	28 f4       	brcc	.+10     	; 0x244c <__ftoa_engine+0x9c>
    2442:	e7 0e       	add	r14, r23
    2444:	f8 1e       	adc	r15, r24
    2446:	49 1f       	adc	r20, r25
    2448:	56 1f       	adc	r21, r22
    244a:	c1 1d       	adc	r28, r1
    244c:	77 0f       	add	r23, r23
    244e:	88 1f       	adc	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	66 1f       	adc	r22, r22
    2454:	06 94       	lsr	r0
    2456:	a1 f7       	brne	.-24     	; 0x2440 <__ftoa_engine+0x90>
    2458:	05 90       	lpm	r0, Z+
    245a:	07 94       	ror	r0
    245c:	28 f4       	brcc	.+10     	; 0x2468 <__ftoa_engine+0xb8>
    245e:	f8 0e       	add	r15, r24
    2460:	49 1f       	adc	r20, r25
    2462:	56 1f       	adc	r21, r22
    2464:	c7 1f       	adc	r28, r23
    2466:	d1 1d       	adc	r29, r1
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	66 1f       	adc	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	06 94       	lsr	r0
    2472:	a1 f7       	brne	.-24     	; 0x245c <__ftoa_engine+0xac>
    2474:	05 90       	lpm	r0, Z+
    2476:	07 94       	ror	r0
    2478:	20 f4       	brcc	.+8      	; 0x2482 <__ftoa_engine+0xd2>
    247a:	49 0f       	add	r20, r25
    247c:	56 1f       	adc	r21, r22
    247e:	c7 1f       	adc	r28, r23
    2480:	d8 1f       	adc	r29, r24
    2482:	99 0f       	add	r25, r25
    2484:	66 1f       	adc	r22, r22
    2486:	77 1f       	adc	r23, r23
    2488:	88 1f       	adc	r24, r24
    248a:	06 94       	lsr	r0
    248c:	a9 f7       	brne	.-22     	; 0x2478 <__ftoa_engine+0xc8>
    248e:	84 91       	lpm	r24, Z
    2490:	10 95       	com	r17
    2492:	17 70       	andi	r17, 0x07	; 7
    2494:	41 f0       	breq	.+16     	; 0x24a6 <__ftoa_engine+0xf6>
    2496:	d6 95       	lsr	r29
    2498:	c7 95       	ror	r28
    249a:	57 95       	ror	r21
    249c:	47 95       	ror	r20
    249e:	f7 94       	ror	r15
    24a0:	e7 94       	ror	r14
    24a2:	1a 95       	dec	r17
    24a4:	c1 f7       	brne	.-16     	; 0x2496 <__ftoa_engine+0xe6>
    24a6:	e2 e8       	ldi	r30, 0x82	; 130
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	68 94       	set
    24ac:	15 90       	lpm	r1, Z+
    24ae:	15 91       	lpm	r17, Z+
    24b0:	35 91       	lpm	r19, Z+
    24b2:	65 91       	lpm	r22, Z+
    24b4:	95 91       	lpm	r25, Z+
    24b6:	05 90       	lpm	r0, Z+
    24b8:	7f e2       	ldi	r23, 0x2F	; 47
    24ba:	73 95       	inc	r23
    24bc:	e1 18       	sub	r14, r1
    24be:	f1 0a       	sbc	r15, r17
    24c0:	43 0b       	sbc	r20, r19
    24c2:	56 0b       	sbc	r21, r22
    24c4:	c9 0b       	sbc	r28, r25
    24c6:	d0 09       	sbc	r29, r0
    24c8:	c0 f7       	brcc	.-16     	; 0x24ba <__ftoa_engine+0x10a>
    24ca:	e1 0c       	add	r14, r1
    24cc:	f1 1e       	adc	r15, r17
    24ce:	43 1f       	adc	r20, r19
    24d0:	56 1f       	adc	r21, r22
    24d2:	c9 1f       	adc	r28, r25
    24d4:	d0 1d       	adc	r29, r0
    24d6:	7e f4       	brtc	.+30     	; 0x24f6 <__ftoa_engine+0x146>
    24d8:	70 33       	cpi	r23, 0x30	; 48
    24da:	11 f4       	brne	.+4      	; 0x24e0 <__ftoa_engine+0x130>
    24dc:	8a 95       	dec	r24
    24de:	e6 cf       	rjmp	.-52     	; 0x24ac <__ftoa_engine+0xfc>
    24e0:	e8 94       	clt
    24e2:	01 50       	subi	r16, 0x01	; 1
    24e4:	30 f0       	brcs	.+12     	; 0x24f2 <__ftoa_engine+0x142>
    24e6:	08 0f       	add	r16, r24
    24e8:	0a f4       	brpl	.+2      	; 0x24ec <__ftoa_engine+0x13c>
    24ea:	00 27       	eor	r16, r16
    24ec:	02 17       	cp	r16, r18
    24ee:	08 f4       	brcc	.+2      	; 0x24f2 <__ftoa_engine+0x142>
    24f0:	20 2f       	mov	r18, r16
    24f2:	23 95       	inc	r18
    24f4:	02 2f       	mov	r16, r18
    24f6:	7a 33       	cpi	r23, 0x3A	; 58
    24f8:	28 f0       	brcs	.+10     	; 0x2504 <__ftoa_engine+0x154>
    24fa:	79 e3       	ldi	r23, 0x39	; 57
    24fc:	7d 93       	st	X+, r23
    24fe:	2a 95       	dec	r18
    2500:	e9 f7       	brne	.-6      	; 0x24fc <__ftoa_engine+0x14c>
    2502:	10 c0       	rjmp	.+32     	; 0x2524 <__ftoa_engine+0x174>
    2504:	7d 93       	st	X+, r23
    2506:	2a 95       	dec	r18
    2508:	89 f6       	brne	.-94     	; 0x24ac <__ftoa_engine+0xfc>
    250a:	06 94       	lsr	r0
    250c:	97 95       	ror	r25
    250e:	67 95       	ror	r22
    2510:	37 95       	ror	r19
    2512:	17 95       	ror	r17
    2514:	17 94       	ror	r1
    2516:	e1 18       	sub	r14, r1
    2518:	f1 0a       	sbc	r15, r17
    251a:	43 0b       	sbc	r20, r19
    251c:	56 0b       	sbc	r21, r22
    251e:	c9 0b       	sbc	r28, r25
    2520:	d0 09       	sbc	r29, r0
    2522:	98 f0       	brcs	.+38     	; 0x254a <__ftoa_engine+0x19a>
    2524:	23 95       	inc	r18
    2526:	7e 91       	ld	r23, -X
    2528:	73 95       	inc	r23
    252a:	7a 33       	cpi	r23, 0x3A	; 58
    252c:	08 f0       	brcs	.+2      	; 0x2530 <__ftoa_engine+0x180>
    252e:	70 e3       	ldi	r23, 0x30	; 48
    2530:	7c 93       	st	X, r23
    2532:	20 13       	cpse	r18, r16
    2534:	b8 f7       	brcc	.-18     	; 0x2524 <__ftoa_engine+0x174>
    2536:	7e 91       	ld	r23, -X
    2538:	70 61       	ori	r23, 0x10	; 16
    253a:	7d 93       	st	X+, r23
    253c:	30 f0       	brcs	.+12     	; 0x254a <__ftoa_engine+0x19a>
    253e:	83 95       	inc	r24
    2540:	71 e3       	ldi	r23, 0x31	; 49
    2542:	7d 93       	st	X+, r23
    2544:	70 e3       	ldi	r23, 0x30	; 48
    2546:	2a 95       	dec	r18
    2548:	e1 f7       	brne	.-8      	; 0x2542 <__ftoa_engine+0x192>
    254a:	11 24       	eor	r1, r1
    254c:	ef 90       	pop	r14
    254e:	ff 90       	pop	r15
    2550:	0f 91       	pop	r16
    2552:	1f 91       	pop	r17
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	99 27       	eor	r25, r25
    255a:	87 fd       	sbrc	r24, 7
    255c:	90 95       	com	r25
    255e:	08 95       	ret

00002560 <strnlen_P>:
    2560:	fc 01       	movw	r30, r24
    2562:	05 90       	lpm	r0, Z+
    2564:	61 50       	subi	r22, 0x01	; 1
    2566:	70 40       	sbci	r23, 0x00	; 0
    2568:	01 10       	cpse	r0, r1
    256a:	d8 f7       	brcc	.-10     	; 0x2562 <strnlen_P+0x2>
    256c:	80 95       	com	r24
    256e:	90 95       	com	r25
    2570:	8e 0f       	add	r24, r30
    2572:	9f 1f       	adc	r25, r31
    2574:	08 95       	ret

00002576 <strnlen>:
    2576:	fc 01       	movw	r30, r24
    2578:	61 50       	subi	r22, 0x01	; 1
    257a:	70 40       	sbci	r23, 0x00	; 0
    257c:	01 90       	ld	r0, Z+
    257e:	01 10       	cpse	r0, r1
    2580:	d8 f7       	brcc	.-10     	; 0x2578 <strnlen+0x2>
    2582:	80 95       	com	r24
    2584:	90 95       	com	r25
    2586:	8e 0f       	add	r24, r30
    2588:	9f 1f       	adc	r25, r31
    258a:	08 95       	ret

0000258c <fputc>:
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	fb 01       	movw	r30, r22
    2596:	23 81       	ldd	r18, Z+3	; 0x03
    2598:	21 fd       	sbrc	r18, 1
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <fputc+0x16>
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	9f ef       	ldi	r25, 0xFF	; 255
    25a0:	2c c0       	rjmp	.+88     	; 0x25fa <fputc+0x6e>
    25a2:	22 ff       	sbrs	r18, 2
    25a4:	16 c0       	rjmp	.+44     	; 0x25d2 <fputc+0x46>
    25a6:	46 81       	ldd	r20, Z+6	; 0x06
    25a8:	57 81       	ldd	r21, Z+7	; 0x07
    25aa:	24 81       	ldd	r18, Z+4	; 0x04
    25ac:	35 81       	ldd	r19, Z+5	; 0x05
    25ae:	42 17       	cp	r20, r18
    25b0:	53 07       	cpc	r21, r19
    25b2:	44 f4       	brge	.+16     	; 0x25c4 <fputc+0x38>
    25b4:	a0 81       	ld	r26, Z
    25b6:	b1 81       	ldd	r27, Z+1	; 0x01
    25b8:	9d 01       	movw	r18, r26
    25ba:	2f 5f       	subi	r18, 0xFF	; 255
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	31 83       	std	Z+1, r19	; 0x01
    25c0:	20 83       	st	Z, r18
    25c2:	8c 93       	st	X, r24
    25c4:	26 81       	ldd	r18, Z+6	; 0x06
    25c6:	37 81       	ldd	r19, Z+7	; 0x07
    25c8:	2f 5f       	subi	r18, 0xFF	; 255
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
    25cc:	37 83       	std	Z+7, r19	; 0x07
    25ce:	26 83       	std	Z+6, r18	; 0x06
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <fputc+0x6e>
    25d2:	8b 01       	movw	r16, r22
    25d4:	ec 01       	movw	r28, r24
    25d6:	fb 01       	movw	r30, r22
    25d8:	00 84       	ldd	r0, Z+8	; 0x08
    25da:	f1 85       	ldd	r31, Z+9	; 0x09
    25dc:	e0 2d       	mov	r30, r0
    25de:	09 95       	icall
    25e0:	89 2b       	or	r24, r25
    25e2:	e1 f6       	brne	.-72     	; 0x259c <fputc+0x10>
    25e4:	d8 01       	movw	r26, r16
    25e6:	16 96       	adiw	r26, 0x06	; 6
    25e8:	8d 91       	ld	r24, X+
    25ea:	9c 91       	ld	r25, X
    25ec:	17 97       	sbiw	r26, 0x07	; 7
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	17 96       	adiw	r26, 0x07	; 7
    25f2:	9c 93       	st	X, r25
    25f4:	8e 93       	st	-X, r24
    25f6:	16 97       	sbiw	r26, 0x06	; 6
    25f8:	ce 01       	movw	r24, r28
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <__ultoa_invert>:
    2604:	fa 01       	movw	r30, r20
    2606:	aa 27       	eor	r26, r26
    2608:	28 30       	cpi	r18, 0x08	; 8
    260a:	51 f1       	breq	.+84     	; 0x2660 <__ultoa_invert+0x5c>
    260c:	20 31       	cpi	r18, 0x10	; 16
    260e:	81 f1       	breq	.+96     	; 0x2670 <__ultoa_invert+0x6c>
    2610:	e8 94       	clt
    2612:	6f 93       	push	r22
    2614:	6e 7f       	andi	r22, 0xFE	; 254
    2616:	6e 5f       	subi	r22, 0xFE	; 254
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	8f 4f       	sbci	r24, 0xFF	; 255
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	af 4f       	sbci	r26, 0xFF	; 255
    2620:	b1 e0       	ldi	r27, 0x01	; 1
    2622:	3e d0       	rcall	.+124    	; 0x26a0 <__ultoa_invert+0x9c>
    2624:	b4 e0       	ldi	r27, 0x04	; 4
    2626:	3c d0       	rcall	.+120    	; 0x26a0 <__ultoa_invert+0x9c>
    2628:	67 0f       	add	r22, r23
    262a:	78 1f       	adc	r23, r24
    262c:	89 1f       	adc	r24, r25
    262e:	9a 1f       	adc	r25, r26
    2630:	a1 1d       	adc	r26, r1
    2632:	68 0f       	add	r22, r24
    2634:	79 1f       	adc	r23, r25
    2636:	8a 1f       	adc	r24, r26
    2638:	91 1d       	adc	r25, r1
    263a:	a1 1d       	adc	r26, r1
    263c:	6a 0f       	add	r22, r26
    263e:	71 1d       	adc	r23, r1
    2640:	81 1d       	adc	r24, r1
    2642:	91 1d       	adc	r25, r1
    2644:	a1 1d       	adc	r26, r1
    2646:	20 d0       	rcall	.+64     	; 0x2688 <__ultoa_invert+0x84>
    2648:	09 f4       	brne	.+2      	; 0x264c <__ultoa_invert+0x48>
    264a:	68 94       	set
    264c:	3f 91       	pop	r19
    264e:	2a e0       	ldi	r18, 0x0A	; 10
    2650:	26 9f       	mul	r18, r22
    2652:	11 24       	eor	r1, r1
    2654:	30 19       	sub	r19, r0
    2656:	30 5d       	subi	r19, 0xD0	; 208
    2658:	31 93       	st	Z+, r19
    265a:	de f6       	brtc	.-74     	; 0x2612 <__ultoa_invert+0xe>
    265c:	cf 01       	movw	r24, r30
    265e:	08 95       	ret
    2660:	46 2f       	mov	r20, r22
    2662:	47 70       	andi	r20, 0x07	; 7
    2664:	40 5d       	subi	r20, 0xD0	; 208
    2666:	41 93       	st	Z+, r20
    2668:	b3 e0       	ldi	r27, 0x03	; 3
    266a:	0f d0       	rcall	.+30     	; 0x268a <__ultoa_invert+0x86>
    266c:	c9 f7       	brne	.-14     	; 0x2660 <__ultoa_invert+0x5c>
    266e:	f6 cf       	rjmp	.-20     	; 0x265c <__ultoa_invert+0x58>
    2670:	46 2f       	mov	r20, r22
    2672:	4f 70       	andi	r20, 0x0F	; 15
    2674:	40 5d       	subi	r20, 0xD0	; 208
    2676:	4a 33       	cpi	r20, 0x3A	; 58
    2678:	18 f0       	brcs	.+6      	; 0x2680 <__ultoa_invert+0x7c>
    267a:	49 5d       	subi	r20, 0xD9	; 217
    267c:	31 fd       	sbrc	r19, 1
    267e:	40 52       	subi	r20, 0x20	; 32
    2680:	41 93       	st	Z+, r20
    2682:	02 d0       	rcall	.+4      	; 0x2688 <__ultoa_invert+0x84>
    2684:	a9 f7       	brne	.-22     	; 0x2670 <__ultoa_invert+0x6c>
    2686:	ea cf       	rjmp	.-44     	; 0x265c <__ultoa_invert+0x58>
    2688:	b4 e0       	ldi	r27, 0x04	; 4
    268a:	a6 95       	lsr	r26
    268c:	97 95       	ror	r25
    268e:	87 95       	ror	r24
    2690:	77 95       	ror	r23
    2692:	67 95       	ror	r22
    2694:	ba 95       	dec	r27
    2696:	c9 f7       	brne	.-14     	; 0x268a <__ultoa_invert+0x86>
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	61 05       	cpc	r22, r1
    269c:	71 05       	cpc	r23, r1
    269e:	08 95       	ret
    26a0:	9b 01       	movw	r18, r22
    26a2:	ac 01       	movw	r20, r24
    26a4:	0a 2e       	mov	r0, r26
    26a6:	06 94       	lsr	r0
    26a8:	57 95       	ror	r21
    26aa:	47 95       	ror	r20
    26ac:	37 95       	ror	r19
    26ae:	27 95       	ror	r18
    26b0:	ba 95       	dec	r27
    26b2:	c9 f7       	brne	.-14     	; 0x26a6 <__ultoa_invert+0xa2>
    26b4:	62 0f       	add	r22, r18
    26b6:	73 1f       	adc	r23, r19
    26b8:	84 1f       	adc	r24, r20
    26ba:	95 1f       	adc	r25, r21
    26bc:	a0 1d       	adc	r26, r0
    26be:	08 95       	ret

000026c0 <__prologue_saves__>:
    26c0:	2f 92       	push	r2
    26c2:	3f 92       	push	r3
    26c4:	4f 92       	push	r4
    26c6:	5f 92       	push	r5
    26c8:	6f 92       	push	r6
    26ca:	7f 92       	push	r7
    26cc:	8f 92       	push	r8
    26ce:	9f 92       	push	r9
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	ca 1b       	sub	r28, r26
    26ea:	db 0b       	sbc	r29, r27
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	09 94       	ijmp

000026f8 <__epilogue_restores__>:
    26f8:	2a 88       	ldd	r2, Y+18	; 0x12
    26fa:	39 88       	ldd	r3, Y+17	; 0x11
    26fc:	48 88       	ldd	r4, Y+16	; 0x10
    26fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2700:	6e 84       	ldd	r6, Y+14	; 0x0e
    2702:	7d 84       	ldd	r7, Y+13	; 0x0d
    2704:	8c 84       	ldd	r8, Y+12	; 0x0c
    2706:	9b 84       	ldd	r9, Y+11	; 0x0b
    2708:	aa 84       	ldd	r10, Y+10	; 0x0a
    270a:	b9 84       	ldd	r11, Y+9	; 0x09
    270c:	c8 84       	ldd	r12, Y+8	; 0x08
    270e:	df 80       	ldd	r13, Y+7	; 0x07
    2710:	ee 80       	ldd	r14, Y+6	; 0x06
    2712:	fd 80       	ldd	r15, Y+5	; 0x05
    2714:	0c 81       	ldd	r16, Y+4	; 0x04
    2716:	1b 81       	ldd	r17, Y+3	; 0x03
    2718:	aa 81       	ldd	r26, Y+2	; 0x02
    271a:	b9 81       	ldd	r27, Y+1	; 0x01
    271c:	ce 0f       	add	r28, r30
    271e:	d1 1d       	adc	r29, r1
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	ed 01       	movw	r28, r26
    272c:	08 95       	ret

0000272e <_exit>:
    272e:	f8 94       	cli

00002730 <__stop_program>:
    2730:	ff cf       	rjmp	.-2      	; 0x2730 <__stop_program>
